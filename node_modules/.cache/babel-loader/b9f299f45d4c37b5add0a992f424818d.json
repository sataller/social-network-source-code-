{"ast":null,"code":"import { dialogsAPI } from \"../API/api\";\nconst SEND_MESSAGE = \"network/dialogs/SEND_MESSAGE\";\nconst START_CHATTING = \"network/dialogs/START_CHATTING\";\nconst SET_DIALOGS = \"network/dialogs/SET_DIALOGS\";\nconst GET_DIALOGS_MESSAGES = \"network/dialogs/GET_DIALOGS_MESSAGES\";\nconst UPDATE_ACTIVE_DIALOG = \"network/dialogs/UPDATE_ACTIVE_DIALOG\";\nlet initialisation = {\n  dialogs: [],\n  activeDialogId: null,\n  messages: null,\n  messageItems: [],\n  item: null\n};\n\nlet dialogsReducer = (state = initialisation, action) => {\n  switch (action.type) {\n    case SEND_MESSAGE:\n      {\n        debugger;\n        return { ...state,\n          item: [...state.messages.items, action.newMessage.message] // messagesItems: [...state.messageItems, (action.newMessage)],\n\n        };\n      }\n\n    case START_CHATTING:\n      {\n        return { ...state,\n          dialogs: [...state.dialogs, action.dialog]\n        };\n      }\n\n    case SET_DIALOGS:\n      {\n        return { ...state,\n          dialogs: action.dialogs\n        };\n      }\n\n    case GET_DIALOGS_MESSAGES:\n      {\n        return { ...state,\n          messages: action.messages,\n          messageItems: action.messages.items\n        };\n      }\n\n    case UPDATE_ACTIVE_DIALOG:\n      {\n        return { ...state,\n          activeDialogId: action.userId\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const sendMessageAC = newMessage => ({\n  type: SEND_MESSAGE,\n  newMessage\n});\nexport const startChatting = dialog => ({\n  type: START_CHATTING,\n  dialog\n});\nexport const setDialogs = dialogs => ({\n  type: SET_DIALOGS,\n  dialogs\n});\nexport const getDialogMessages = messages => ({\n  type: GET_DIALOGS_MESSAGES,\n  messages\n});\nexport const updateActiveDialog = userId => ({\n  type: UPDATE_ACTIVE_DIALOG,\n  userId\n});\nexport const sendNewMessage = (userId, body) => async dispatch => {\n  debugger;\n  const response = await dialogsAPI.sendMessage(userId, body);\n\n  if (response.data.resultCode === 0) {\n    dispatch(sendMessageAC(response.data.data));\n    debugger;\n  }\n};\nexport const startDialog = userId => async dispatch => {\n  const response = await dialogsAPI.startChatting(userId);\n\n  if (response.resultCode === 0) {\n    dispatch(startChatting(response.data));\n  }\n};\nexport const getDialogs = () => async dispatch => {\n  const response = await dialogsAPI.getDialogs();\n  dispatch(setDialogs(response.data));\n};\nexport const getMessages = userId => async dispatch => {\n  const response = await dialogsAPI.getMassagesList(userId);\n  dispatch(getDialogMessages(response.data));\n  dispatch(updateActiveDialog(userId));\n};\nexport default dialogsReducer;","map":{"version":3,"sources":["D:/react/net/project1/src/Redux/dialogsReducer.js"],"names":["dialogsAPI","SEND_MESSAGE","START_CHATTING","SET_DIALOGS","GET_DIALOGS_MESSAGES","UPDATE_ACTIVE_DIALOG","initialisation","dialogs","activeDialogId","messages","messageItems","item","dialogsReducer","state","action","type","items","newMessage","message","dialog","userId","sendMessageAC","startChatting","setDialogs","getDialogMessages","updateActiveDialog","sendNewMessage","body","dispatch","response","sendMessage","data","resultCode","startDialog","getDialogs","getMessages","getMassagesList"],"mappings":"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","sourcesContent":["import {dialogsAPI} from \"../API/api\";\r\n\r\nconst SEND_MESSAGE = \"network/dialogs/SEND_MESSAGE\";\r\nconst START_CHATTING = \"network/dialogs/START_CHATTING\";\r\nconst SET_DIALOGS = \"network/dialogs/SET_DIALOGS\";\r\nconst GET_DIALOGS_MESSAGES = \"network/dialogs/GET_DIALOGS_MESSAGES\";\r\nconst UPDATE_ACTIVE_DIALOG = \"network/dialogs/UPDATE_ACTIVE_DIALOG\";\r\n\r\n\r\nlet initialisation = {\r\n    dialogs: [],\r\n    activeDialogId: null,\r\n    messages: null,\r\n    messageItems: [],\r\n    item:null,\r\n\r\n};\r\n\r\n\r\nlet dialogsReducer = (state = initialisation, action) => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE: {\r\n            debugger\r\n            return {\r\n                ...state,\r\n                item: [...state.messages.items, action.newMessage.message],\r\n                // messagesItems: [...state.messageItems, (action.newMessage)],\r\n            }\r\n        }\r\n        case START_CHATTING: {\r\n            return {\r\n                ...state,\r\n                dialogs: [...state.dialogs, action.dialog]\r\n            }\r\n        }\r\n        case SET_DIALOGS: {\r\n            return {\r\n                ...state,\r\n                dialogs: action.dialogs,\r\n            }\r\n        }\r\n        case GET_DIALOGS_MESSAGES: {\r\n            return {\r\n                ...state,\r\n                messages: action.messages,\r\n                messageItems: action.messages.items,\r\n            }\r\n        }\r\n        case UPDATE_ACTIVE_DIALOG: {\r\n            return {\r\n                ...state,\r\n                activeDialogId: action.userId,\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const sendMessageAC = (newMessage) => ({type: SEND_MESSAGE, newMessage});\r\n\r\nexport const startChatting = (dialog) => ({type: START_CHATTING, dialog});\r\n\r\nexport const setDialogs = (dialogs) => ({type: SET_DIALOGS, dialogs});\r\n\r\nexport const getDialogMessages = (messages) => ({type: GET_DIALOGS_MESSAGES, messages})\r\n\r\nexport const updateActiveDialog = (userId) => ({type: UPDATE_ACTIVE_DIALOG, userId})\r\n\r\nexport const sendNewMessage = (userId, body) => async (dispatch) => {\r\n    debugger\r\n    const response = await dialogsAPI.sendMessage(userId, body)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(sendMessageAC(response.data.data))\r\n        debugger\r\n\r\n    }\r\n}\r\n\r\nexport const startDialog = (userId) => async (dispatch) => {\r\n    const response = await dialogsAPI.startChatting(userId)\r\n    if (response.resultCode === 0) {\r\n        dispatch(startChatting(response.data))\r\n    }\r\n}\r\n\r\nexport const getDialogs = () => async (dispatch) => {\r\n    const response = await dialogsAPI.getDialogs()\r\n    dispatch(setDialogs(response.data))\r\n}\r\n\r\nexport const getMessages = (userId) => async (dispatch) => {\r\n\r\n    const response = await dialogsAPI.getMassagesList(userId)\r\n    dispatch(getDialogMessages(response.data))\r\n    dispatch(updateActiveDialog(userId))\r\n\r\n}\r\n\r\n\r\nexport default dialogsReducer\r\n"]},"metadata":{},"sourceType":"module"}