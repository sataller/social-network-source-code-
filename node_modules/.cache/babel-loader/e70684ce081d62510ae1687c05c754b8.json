{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\net\\\\project1\\\\src\\\\components\\\\Dialogs\\\\Dialog\\\\Message\\\\Messages.jsx\";\n// import React, {useState} from \"react\"\n// import Message from \"./Message\";\n// import {reversedCopy} from \"../../../../utils/arrayHalper\";\n//\n// const Messages = (props) => {\n//\n//     let reversMessageElement = null;\n//\n//     if (props.activeDialogId && props.dialogsPage.messagesItems) {\n//         let messageElement = props.dialogsPage.messagesItems;\n//         reversMessageElement = reversedCopy(messageElement).map(m => <Message id={m.id} key={m.id} messageText={m.body}\n//                                                                               recipientId={m.recipientId}\n//                                                                               senderId={m.senderId}\n//                                                                               senderName={m.senderName}\n//                                                                               translatedBody={m.translatedBody}\n//                                                                               viewed={m.viewed}\n//                                                                               totalCount={m.totalCount}\n//                                                                               addedAt={m.addedAt}\n//                                                                               authUserId={props.authUserId}\n//                                                                               setMessageViewed={props.setMessageViewed}\n//                                                                               sendMessageInSpam={props.sendMessageInSpam}\n//                                                                               deleteMessageForMe={props.deleteMessageForMe}/>)\n//     }\n//\n//     return (\n//         <div>\n//             {reversMessageElement}\n//         </div>\n//     )\n// }\n// export default Messages\n//--------------------------------------------------------------------------------------------------------------------------\nimport React from \"react\";\nimport Message from \"./Message\";\nimport spamIcon from \"../../../../assets/spamIcon.png\";\nimport deleteIcon from \"../../../../assets/deleteIcon.png\";\n\nconst Messages = props => {\n  let addToSpam = () => {\n    props.sendMessageInSpam(props.id);\n  };\n\n  let deleteMessage = () => {\n    props.deleteMessageForMe(props.id);\n  };\n\n  let restoreMessage = () => {\n    props.restoreMessage(messageId);\n  };\n\n  if (props.senderId !== props.authUserId) {\n    props.setMessageViewed(props.id);\n    props.spamMessagesId.map(s => {\n      if (s == props.id) {\n        return React.createElement(Message, {\n          id: props.id,\n          messageText: props.body,\n          recipientId: props.recipientId,\n          senderId: props.senderId,\n          senderName: props.senderName,\n          translatedBody: props.translatedBody,\n          viewed: props.viewed,\n          totalCount: props.totalCount,\n          addedAt: props.addedAt,\n          authUserId: props.authUserId,\n          setMessageViewed: props.setMessageViewed,\n          sendMessageInSpam: addToSpam,\n          deleteMessageForMe: deleteMessage,\n          buttonClick: restoreMessage,\n          buttonIcon: spamIcon,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        });\n      }\n    });\n  } else {\n    return React.createElement(Message, {\n      id: props.id,\n      messageText: props.body,\n      recipientId: props.recipientId,\n      senderId: props.senderId,\n      senderName: props.senderName,\n      translatedBody: props.translatedBody,\n      viewed: props.viewed,\n      totalCount: props.totalCount,\n      addedAt: props.addedAt,\n      authUserId: props.authUserId,\n      setMessageViewed: props.setMessageViewed,\n      sendMessageInSpam: addToSpam,\n      deleteMessageForMe: deleteMessage,\n      buttonClick: addToSpam,\n      buttonIcon: spamIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    });\n  }\n\n  if (props.senderId == props.authUserId) {\n    props.deleteMessagesId.map(s => {\n      if (s == props.id) {\n        return React.createElement(Message, {\n          id: props.id,\n          messageText: props.body,\n          recipientId: props.recipientId,\n          senderId: props.senderId,\n          senderName: props.senderName,\n          translatedBody: props.translatedBody,\n          viewed: props.viewed,\n          totalCount: props.totalCount,\n          addedAt: props.addedAt,\n          authUserId: props.authUserId,\n          setMessageViewed: props.setMessageViewed,\n          sendMessageInSpam: addToSpam,\n          deleteMessageForMe: deleteMessage,\n          buttonClick: restoreMessage,\n          buttonIcon: deleteIcon,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        });\n      }\n    });\n  } else {\n    return React.createElement(Message, {\n      id: props.id,\n      messageText: props.body,\n      recipientId: props.recipientId,\n      senderId: props.senderId,\n      senderName: props.senderName,\n      translatedBody: props.translatedBody,\n      viewed: props.viewed,\n      totalCount: props.totalCount,\n      addedAt: props.addedAt,\n      authUserId: props.authUserId,\n      setMessageViewed: props.setMessageViewed,\n      sendMessageInSpam: addToSpam,\n      deleteMessageForMe: deleteMessage,\n      buttonClick: deleteMessage,\n      buttonIcon: deleteIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    });\n  }\n};\n\nexport default Messages;","map":{"version":3,"sources":["D:/react/net/project1/src/components/Dialogs/Dialog/Message/Messages.jsx"],"names":["React","Message","spamIcon","deleteIcon","Messages","props","addToSpam","sendMessageInSpam","id","deleteMessage","deleteMessageForMe","restoreMessage","messageId","senderId","authUserId","setMessageViewed","spamMessagesId","map","s","body","recipientId","senderName","translatedBody","viewed","totalCount","addedAt","deleteMessagesId"],"mappings":"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","sourcesContent":["// import React, {useState} from \"react\"\r\n// import Message from \"./Message\";\r\n// import {reversedCopy} from \"../../../../utils/arrayHalper\";\r\n//\r\n// const Messages = (props) => {\r\n//\r\n//     let reversMessageElement = null;\r\n//\r\n//     if (props.activeDialogId && props.dialogsPage.messagesItems) {\r\n//         let messageElement = props.dialogsPage.messagesItems;\r\n//         reversMessageElement = reversedCopy(messageElement).map(m => <Message id={m.id} key={m.id} messageText={m.body}\r\n//                                                                               recipientId={m.recipientId}\r\n//                                                                               senderId={m.senderId}\r\n//                                                                               senderName={m.senderName}\r\n//                                                                               translatedBody={m.translatedBody}\r\n//                                                                               viewed={m.viewed}\r\n//                                                                               totalCount={m.totalCount}\r\n//                                                                               addedAt={m.addedAt}\r\n//                                                                               authUserId={props.authUserId}\r\n//                                                                               setMessageViewed={props.setMessageViewed}\r\n//                                                                               sendMessageInSpam={props.sendMessageInSpam}\r\n//                                                                               deleteMessageForMe={props.deleteMessageForMe}/>)\r\n//     }\r\n//\r\n//     return (\r\n//         <div>\r\n//             {reversMessageElement}\r\n//         </div>\r\n//     )\r\n// }\r\n// export default Messages\r\n\r\n//--------------------------------------------------------------------------------------------------------------------------\r\n\r\nimport React from \"react\"\r\nimport Message from \"./Message\";\r\nimport spamIcon from \"../../../../assets/spamIcon.png\"\r\nimport deleteIcon from \"../../../../assets/deleteIcon.png\"\r\n\r\nconst Messages = (props) => {\r\n\r\n    let addToSpam = () => {\r\n        props.sendMessageInSpam(props.id)\r\n    }\r\n\r\n    let deleteMessage = () => {\r\n        props.deleteMessageForMe(props.id)\r\n    }\r\n\r\n    let restoreMessage = () => {\r\n        props.restoreMessage(messageId)\r\n    }\r\n\r\n    if (props.senderId !== props.authUserId) {\r\n        props.setMessageViewed(props.id);\r\n        props.spamMessagesId.map(s => {\r\n            if (s == props.id) {\r\n                return (\r\n                    <Message id={props.id} messageText={props.body}\r\n                             recipientId={props.recipientId}\r\n                             senderId={props.senderId}\r\n                             senderName={props.senderName}\r\n                             translatedBody={props.translatedBody}\r\n                             viewed={props.viewed}\r\n                             totalCount={props.totalCount}\r\n                             addedAt={props.addedAt}\r\n                             authUserId={props.authUserId}\r\n                             setMessageViewed={props.setMessageViewed}\r\n                             sendMessageInSpam={addToSpam}\r\n                             deleteMessageForMe={deleteMessage}\r\n                             buttonClick={restoreMessage}\r\n                             buttonIcon={spamIcon}/>\r\n                )\r\n            }\r\n        })\r\n    } else {\r\n        return (\r\n            <Message id={props.id} messageText={props.body}\r\n                     recipientId={props.recipientId}\r\n                     senderId={props.senderId}\r\n                     senderName={props.senderName}\r\n                     translatedBody={props.translatedBody}\r\n                     viewed={props.viewed}\r\n                     totalCount={props.totalCount}\r\n                     addedAt={props.addedAt}\r\n                     authUserId={props.authUserId}\r\n                     setMessageViewed={props.setMessageViewed}\r\n                     sendMessageInSpam={addToSpam}\r\n                     deleteMessageForMe={deleteMessage}\r\n                     buttonClick={addToSpam}\r\n                     buttonIcon={spamIcon}/>\r\n        )\r\n    }\r\n\r\n    if (props.senderId == props.authUserId) {\r\n        props.deleteMessagesId.map(s => {\r\n            if (s == props.id) {\r\n                return (\r\n                    <Message id={props.id} messageText={props.body}\r\n                             recipientId={props.recipientId}\r\n                             senderId={props.senderId}\r\n                             senderName={props.senderName}\r\n                             translatedBody={props.translatedBody}\r\n                             viewed={props.viewed}\r\n                             totalCount={props.totalCount}\r\n                             addedAt={props.addedAt}\r\n                             authUserId={props.authUserId}\r\n                             setMessageViewed={props.setMessageViewed}\r\n                             sendMessageInSpam={addToSpam}\r\n                             deleteMessageForMe={deleteMessage}\r\n                             buttonClick={restoreMessage}\r\n                             buttonIcon={deleteIcon}/>\r\n                )\r\n            }\r\n        })\r\n    } else {\r\n        return (\r\n            <Message id={props.id} messageText={props.body}\r\n                     recipientId={props.recipientId}\r\n                     senderId={props.senderId}\r\n                     senderName={props.senderName}\r\n                     translatedBody={props.translatedBody}\r\n                     viewed={props.viewed}\r\n                     totalCount={props.totalCount}\r\n                     addedAt={props.addedAt}\r\n                     authUserId={props.authUserId}\r\n                     setMessageViewed={props.setMessageViewed}\r\n                     sendMessageInSpam={addToSpam}\r\n                     deleteMessageForMe={deleteMessage}\r\n                     buttonClick={deleteMessage} buttonIcon={deleteIcon}/>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Messages\r\n\r\n"]},"metadata":{},"sourceType":"module"}