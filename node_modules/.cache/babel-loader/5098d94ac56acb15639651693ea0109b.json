{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\net\\\\project1\\\\src\\\\components\\\\Dialogs\\\\Dialogs.jsx\";\nimport React from \"react\";\nimport NewMessage from \"./NewMessage/NewMessage\";\nimport User from \"./Dialog/User/User\";\nimport style from \"./Dialogs.module.css\";\nimport Message from \"./Dialog/Message/Message\";\nimport { reversedCopy } from \"../../utils/arrayHalper\";\nimport MessageContainer from \"./Dialog/Message/MessageContainer\";\nimport { getMessages } from \"../../Redux/dialogsReducer\";\n\nconst Dialogs = props => {\n  let usersElement = null;\n\n  if (props.dialogs) {\n    usersElement = props.dialogs.map(u => React.createElement(User, {\n      id: u.id,\n      avatar: u.photos.small,\n      name: u.userName,\n      key: u.id,\n      dialogs: props.dialogs,\n      newMessagesCount: props.newMessagesCount,\n      lastUserActivityDate: props.lastUserActivityDate,\n      lastDialogActivityDate: props.lastDialogActivityDate,\n      hasNewMessages: props.hasNewMessages,\n      getMessages: props.getMessages,\n      pageCount: props.pageCount,\n      messagePageSize: props.messagePageSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }));\n  } // let reversMessageElement = null;\n  //\n  //\n  // if (props.activeDialogId) {\n  //     let messageElement = props.dialogsPage.messagesItems;\n  //     reversMessageElement = reversedCopy(messageElement).map(m => <Message id={m.id} key={m.id} messageText={m.body}\n  //                                                                           recipientId={m.recipientId}\n  //                                                                           senderId={m.senderId}\n  //                                                                           senderName={m.senderName}\n  //                                                                           translatedBody={m.translatedBody}\n  //                                                                           viewed={m.viewed}\n  //                                                                           totalCount={m.totalCount}\n  //                                                                           addedAt={m.addedAt}/>)\n  // }\n\n\n  return React.createElement(\"div\", {\n    className: style.dialogs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: style.users,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, usersElement), React.createElement(\"div\", {\n    className: style.messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(MessageContainer, {\n    activeDialogId: props.activeDialogId,\n    dialogsPage: props.dialogsPage,\n    getMessages: props.getMessages,\n    pageCount: props.pageCount,\n    messagePageSize: props.messagePageSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: style.newMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, props.activeDialogId ? React.createElement(NewMessage, {\n    dialogsPage: props.dialogsPage,\n    sendNewMessage: props.sendNewMessage,\n    activeDialogId: props.activeDialogId,\n    sendNewMessage: props.sendNewMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }) : null));\n};\n\nexport default Dialogs;","map":{"version":3,"sources":["D:/react/net/project1/src/components/Dialogs/Dialogs.jsx"],"names":["React","NewMessage","User","style","Message","reversedCopy","MessageContainer","getMessages","Dialogs","props","usersElement","dialogs","map","u","id","photos","small","userName","newMessagesCount","lastUserActivityDate","lastDialogActivityDate","hasNewMessages","pageCount","messagePageSize","users","messages","activeDialogId","dialogsPage","newMessage","sendNewMessage"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,SAAQC,YAAR,QAA2B,yBAA3B;AACA,OAAOC,gBAAP,MAA6B,mCAA7B;AACA,SAAQC,WAAR,QAA0B,4BAA1B;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AACvB,MAAIC,YAAY,GAAG,IAAnB;;AAEA,MAAID,KAAK,CAACE,OAAV,EAAmB;AACfD,IAAAA,YAAY,GAAGD,KAAK,CAACE,OAAN,CAAcC,GAAd,CAAkBC,CAAC,IAAI,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAEA,CAAC,CAACC,EAAZ;AACM,MAAA,MAAM,EAAED,CAAC,CAACE,MAAF,CAASC,KADvB;AAEM,MAAA,IAAI,EAAEH,CAAC,CAACI,QAFd;AAGM,MAAA,GAAG,EAAEJ,CAAC,CAACC,EAHb;AAIM,MAAA,OAAO,EAAEL,KAAK,CAACE,OAJrB;AAKM,MAAA,gBAAgB,EAAEF,KAAK,CAACS,gBAL9B;AAMM,MAAA,oBAAoB,EAAET,KAAK,CAACU,oBANlC;AAOM,MAAA,sBAAsB,EAAEV,KAAK,CAACW,sBAPpC;AAQM,MAAA,cAAc,EAAEX,KAAK,CAACY,cAR5B;AASM,MAAA,WAAW,EAAEZ,KAAK,CAACF,WATzB;AAUM,MAAA,SAAS,EAAEE,KAAK,CAACa,SAVvB;AAWM,MAAA,eAAe,EAAEb,KAAK,CAACc,eAX7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAvB,CAAf;AAYH,GAhBsB,CAmBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAEI;AAAK,IAAA,SAAS,EAAEpB,KAAK,CAACQ,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI;AAAK,IAAA,SAAS,EAAER,KAAK,CAACqB,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKd,YADL,CAFJ,EAMI;AAAK,IAAA,SAAS,EAAEP,KAAK,CAACsB,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,gBAAD;AAAkB,IAAA,cAAc,EAAEhB,KAAK,CAACiB,cAAxC;AAAwD,IAAA,WAAW,EAAEjB,KAAK,CAACkB,WAA3E;AACkB,IAAA,WAAW,EAAElB,KAAK,CAACF,WADrC;AACmD,IAAA,SAAS,EAAEE,KAAK,CAACa,SADpE;AAEkB,IAAA,eAAe,EAAEb,KAAK,CAACc,eAFzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CANJ,EAaI;AAAK,IAAA,SAAS,EAAEpB,KAAK,CAACyB,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKnB,KAAK,CAACiB,cAAN,GAAuB,oBAAC,UAAD;AAAY,IAAA,WAAW,EAAEjB,KAAK,CAACkB,WAA/B;AACY,IAAA,cAAc,EAAElB,KAAK,CAACoB,cADlC;AAEY,IAAA,cAAc,EAAEpB,KAAK,CAACiB,cAFlC;AAGY,IAAA,cAAc,EAAEjB,KAAK,CAACoB,cAHlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAvB,GAG6E,IAJlF,CAbJ,CAFJ;AAuBH,CAzDD;;AA2DA,eAAerB,OAAf","sourcesContent":["import React from \"react\"\r\nimport NewMessage from \"./NewMessage/NewMessage\";\r\nimport User from \"./Dialog/User/User\";\r\nimport style from \"./Dialogs.module.css\"\r\nimport Message from \"./Dialog/Message/Message\";\r\nimport {reversedCopy} from \"../../utils/arrayHalper\";\r\nimport MessageContainer from \"./Dialog/Message/MessageContainer\";\r\nimport {getMessages} from \"../../Redux/dialogsReducer\";\r\n\r\nconst Dialogs = (props) => {\r\n    let usersElement = null;\r\n\r\n    if (props.dialogs) {\r\n        usersElement = props.dialogs.map(u => <User id={u.id}\r\n                                                    avatar={u.photos.small}\r\n                                                    name={u.userName}\r\n                                                    key={u.id}\r\n                                                    dialogs={props.dialogs}\r\n                                                    newMessagesCount={props.newMessagesCount}\r\n                                                    lastUserActivityDate={props.lastUserActivityDate}\r\n                                                    lastDialogActivityDate={props.lastDialogActivityDate}\r\n                                                    hasNewMessages={props.hasNewMessages}\r\n                                                    getMessages={props.getMessages}\r\n                                                    pageCount={props.pageCount}\r\n                                                    messagePageSize={props.messagePageSize}/>)\r\n    }\r\n\r\n\r\n    // let reversMessageElement = null;\r\n    //\r\n    //\r\n    // if (props.activeDialogId) {\r\n    //     let messageElement = props.dialogsPage.messagesItems;\r\n    //     reversMessageElement = reversedCopy(messageElement).map(m => <Message id={m.id} key={m.id} messageText={m.body}\r\n    //                                                                           recipientId={m.recipientId}\r\n    //                                                                           senderId={m.senderId}\r\n    //                                                                           senderName={m.senderName}\r\n    //                                                                           translatedBody={m.translatedBody}\r\n    //                                                                           viewed={m.viewed}\r\n    //                                                                           totalCount={m.totalCount}\r\n    //                                                                           addedAt={m.addedAt}/>)\r\n    // }\r\n\r\n    return (\r\n\r\n        <div className={style.dialogs}>\r\n\r\n            <div className={style.users}>\r\n                {usersElement}\r\n\r\n            </div>\r\n            <div className={style.messages}>\r\n                <MessageContainer activeDialogId={props.activeDialogId} dialogsPage={props.dialogsPage}\r\n                                  getMessages={props.getMessages}  pageCount={props.pageCount}\r\n                                  messagePageSize={props.messagePageSize}/>\r\n                {/*{reversMessageElement}*/}\r\n            </div>\r\n\r\n            <div className={style.newMessage}>\r\n                {props.activeDialogId ? <NewMessage dialogsPage={props.dialogsPage}\r\n                                                    sendNewMessage={props.sendNewMessage}\r\n                                                    activeDialogId={props.activeDialogId}\r\n                                                    sendNewMessage={props.sendNewMessage}/> : null}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs"]},"metadata":{},"sourceType":"module"}