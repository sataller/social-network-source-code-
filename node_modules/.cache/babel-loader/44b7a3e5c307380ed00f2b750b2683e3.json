{"ast":null,"code":"import React from \"react\";\nimport { usersAPI } from \"../API/api\";\nconst FOLLOW = \"FOLLOW\";\nconst UNFOLLOW = \"UNFOLLOW\";\nconst SET_USERS = \"SET_USERS\";\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\";\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\nconst FOLLOWING_IN_PROGRESS = \"FOLLOWING_IN_PROGRESS\";\nlet initialization = {\n  users: [],\n  pageSize: 5,\n  totalCount: 0,\n  currentPage: 1,\n  isFetching: false,\n  followingInProgress: []\n};\n\nlet usersReducer = (state = initialization, action) => {\n  switch (action.type) {\n    case FOLLOW:\n      console.log(action.userId);\n      return { ...state,\n        users: state.users.map(u => {\n          console.log(u);\n\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: true\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case UNFOLLOW:\n      console.log(action.userId);\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: false\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case SET_USERS:\n      {\n        return { ...state,\n          users: [...action.users]\n        };\n      }\n\n    case SET_CURRENT_PAGE:\n      {\n        return { ...state,\n          currentPage: action.currentPage\n        };\n      }\n\n    case SET_TOTAL_USERS_COUNT:\n      {\n        return { ...state,\n          totalCount: action.totalCount\n        };\n      }\n\n    case TOGGLE_IS_FETCHING:\n      {\n        return { ...state,\n          isFetching: action.isFetching\n        };\n      }\n\n    case FOLLOWING_IN_PROGRESS:\n      {\n        return { ...state,\n          followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id != action.userId)\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport let toggleFollowingProgress = (isFetching, userId) => ({\n  type: FOLLOWING_IN_PROGRESS,\n  isFetching,\n  userId\n});\nexport let toggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport let setPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport let setTotalUsersCount = totalCount => ({\n  type: SET_TOTAL_USERS_COUNT,\n  totalCount\n});\nexport let followSuccess = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport let unfollowSuccess = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport let setUsers = users => ({\n  type: SET_USERS,\n  users\n});\nexport let getUsers = (currentPage, pageSize) => {\n  return dispatch => {\n    dispatch(setPage(currentPage));\n    dispatch(toggleIsFetching(true));\n    usersAPI.getUsers(currentPage, pageSize).then(data => {\n      dispatch(toggleIsFetching(false));\n      dispatch(setUsers(data.items));\n      dispatch(setTotalUsersCount(data.totalCount));\n    });\n  };\n};\nexport let follow = userId => {\n  return dispatch => {\n    dispatch(toggleFollowingProgress(true, props.id));\n    usersAPI.followUser(userId).then(data => {\n      if (data.resultCode == 0) {\n        dispatch(followSuccess(userId));\n      }\n\n      dispatch(toggleFollowingProgress(false, userId));\n    });\n  };\n};\nexport let unfollow = userId => {\n  return dispatch => {\n    dispatch(toggleFollowingProgress(true, userId));\n    usersAPI.unfollowUser(userId).then(data => {\n      if (data.resultCode == 0) {\n        dispatch(unfollowSuccess(userId));\n      }\n\n      dispatch(toggleFollowingProgress(false, userId));\n    });\n  };\n};\nexport default usersReducer;","map":{"version":3,"sources":["D:/react/net/project1/src/Redux/usersReducer.js"],"names":["React","usersAPI","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","FOLLOWING_IN_PROGRESS","initialization","users","pageSize","totalCount","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","console","log","userId","map","u","id","followed","filter","toggleFollowingProgress","toggleIsFetching","setPage","setTotalUsersCount","followSuccess","unfollowSuccess","setUsers","getUsers","dispatch","then","data","items","follow","props","followUser","resultCode","unfollow","unfollowUser"],"mappings":"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","sourcesContent":["import React from \"react\"\r\nimport {usersAPI} from \"../API/api\";\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = \"SET_USERS\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\r\nconst FOLLOWING_IN_PROGRESS = \"FOLLOWING_IN_PROGRESS\";\r\n\r\n\r\nlet initialization = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [],\r\n}\r\nlet usersReducer = (state = initialization, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            console.log(action.userId)\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    console.log(u)\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                }),\r\n            }\r\n\r\n        case UNFOLLOW:\r\n            console.log(action.userId)\r\n\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case SET_USERS: {\r\n            return {...state, users: [...action.users]}\r\n\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalCount: action.totalCount}\r\n        }\r\n\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n\r\n        case FOLLOWING_IN_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ?\r\n                    [...state.followingInProgress, action.userId] :\r\n                    state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport let toggleFollowingProgress = (isFetching, userId) => ({type: FOLLOWING_IN_PROGRESS, isFetching, userId})\r\nexport let toggleIsFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching})\r\nexport let setPage = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage})\r\nexport let setTotalUsersCount = (totalCount) => ({type: SET_TOTAL_USERS_COUNT, totalCount})\r\nexport let followSuccess = (userId) => ({type: FOLLOW, userId})\r\nexport let unfollowSuccess = (userId) => ({type: UNFOLLOW, userId})\r\nexport let setUsers = (users) => ({type: SET_USERS, users})\r\n\r\n\r\nexport let getUsers = (currentPage, pageSize) => {\r\n    return ((dispatch) => {\r\n        dispatch(setPage(currentPage))\r\n        dispatch(toggleIsFetching(true));\r\n        usersAPI.getUsers(currentPage, pageSize).then(data => {\r\n            dispatch(toggleIsFetching(false))\r\n\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setTotalUsersCount(data.totalCount))\r\n        });\r\n    })\r\n}\r\n\r\nexport let follow = (userId) => {\r\n    return (dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, props.id))\r\n        usersAPI.followUser(userId).then(data => {\r\n            if (data.resultCode == 0) {\r\n                dispatch(followSuccess(userId))\r\n            }\r\n            dispatch(toggleFollowingProgress(false, userId))\r\n        });\r\n    }\r\n}\r\n\r\nexport let unfollow = (userId) => {\r\n    return (dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        usersAPI.unfollowUser(userId).then(data => {\r\n            if (data.resultCode == 0) {\r\n                dispatch(unfollowSuccess(userId))\r\n            }\r\n            dispatch(toggleFollowingProgress(false, userId))\r\n        });\r\n    }\r\n}\r\n\r\nexport default usersReducer\r\n"]},"metadata":{},"sourceType":"module"}