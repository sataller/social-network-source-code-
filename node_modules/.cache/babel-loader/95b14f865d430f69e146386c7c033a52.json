{"ast":null,"code":"import { dialogsAPI } from \"../API/api\";\nconst SEND_MESSAGE = \"network/dialogs/SEND_MESSAGE\";\nconst START_CHATTING = \"network/dialogs/START_CHATTING\";\nconst SET_DIALOGS = \"network/dialogs/SET_DIALOGS\";\nconst GET_DIALOGS_MESSAGES = \"network/dialogs/GET_DIALOGS_MESSAGES\";\nlet initialisation = {\n  dialogs: [],\n  userId: 6720,\n  messages: []\n};\n\nlet dialogsReducer = (state = initialisation, action) => {\n  switch (action.type) {\n    case SEND_MESSAGE:\n      {\n        return { ...state,\n          messages: state.dialogs.map(d => {\n            if (d.userId === action.userId) {\n              return { ...d,\n                messages: [d.messages, action.body]\n              };\n            }\n\n            return d;\n          })\n        };\n      }\n\n    case START_CHATTING:\n      {\n        return { ...state,\n          dialogs: [...state.dialogs, action.dialog]\n        };\n      }\n\n    case SET_DIALOGS:\n      {\n        return { ...state,\n          dialogs: action.dialogs\n        };\n      }\n\n    case GET_DIALOGS_MESSAGES:\n      {\n        debugger;\n        return { ...state,\n          messages: action.messages\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const sendMessageAC = (newText, userId, body) => ({\n  type: SEND_MESSAGE,\n  newText,\n  userId,\n  body\n});\nexport const startChatting = dialog => ({\n  type: START_CHATTING,\n  dialog\n});\nexport const setDialogs = dialogs => ({\n  type: SET_DIALOGS,\n  dialogs\n});\nexport const getDialogMessages = messages => ({\n  type: GET_DIALOGS_MESSAGES,\n  messages\n});\nexport const sendNewMessage = (userId, body) => async dispatch => {\n  const response = await dialogsAPI.sendMessage(userId, body);\n  dispatch(sendMessageAC(response));\n};\nexport const startDialog = userId => async dispatch => {\n  const response = await dialogsAPI.startChatting(userId);\n  debugger;\n\n  if (response.resultCode === 0) {\n    dispatch(startChatting(response.data));\n  }\n};\nexport const getDialogs = () => async dispatch => {\n  const response = await dialogsAPI.getDialogs();\n  dispatch(setDialogs(response.data));\n};\nexport const getMessages = userId => async dispatch => {\n  const response = await dialogsAPI.getMassagesList(userId);\n  debugger;\n  dispatch(getDialogMessages(response.data));\n};\nexport default dialogsReducer; // .map(d =>{\n//     if (d.userId === action.userId){\n//         return d.messages\n//     }\n//     return d\n// })","map":{"version":3,"sources":["D:/react/net/project1/src/Redux/dialogsReducer.js"],"names":["dialogsAPI","SEND_MESSAGE","START_CHATTING","SET_DIALOGS","GET_DIALOGS_MESSAGES","initialisation","dialogs","userId","messages","dialogsReducer","state","action","type","map","d","body","dialog","sendMessageAC","newText","startChatting","setDialogs","getDialogMessages","sendNewMessage","dispatch","response","sendMessage","startDialog","resultCode","data","getDialogs","getMessages","getMassagesList"],"mappings":"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","sourcesContent":["import {dialogsAPI} from \"../API/api\";\r\n\r\nconst SEND_MESSAGE = \"network/dialogs/SEND_MESSAGE\";\r\nconst START_CHATTING = \"network/dialogs/START_CHATTING\";\r\nconst SET_DIALOGS = \"network/dialogs/SET_DIALOGS\";\r\nconst GET_DIALOGS_MESSAGES = \"network/dialogs/GET_DIALOGS_MESSAGES\";\r\n\r\n\r\n\r\nlet initialisation = {\r\n    dialogs: [],\r\n    userId:6720,\r\n    messages:[],\r\n\r\n};\r\n\r\nlet dialogsReducer = (state = initialisation, action) => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:{\r\n            return{\r\n            ...state,\r\n            messages: state.dialogs.map(d =>{\r\n                if (d.userId === action.userId){\r\n                    return {...d, messages:[d.messages, action.body]}\r\n                }\r\n                return d\r\n            })\r\n        }}\r\n        case START_CHATTING:{\r\n            return{...state,\r\n                dialogs: [...state.dialogs, action.dialog]}\r\n        }\r\n        case SET_DIALOGS:{\r\n            return{\r\n            ...state,\r\n                dialogs:action.dialogs,\r\n        }}\r\n        case GET_DIALOGS_MESSAGES:{\r\n            debugger\r\n            return{\r\n            ...state,\r\n            messages: action.messages,\r\n        }}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const sendMessageAC = (newText, userId, body) => ({type: SEND_MESSAGE, newText, userId, body});\r\n\r\nexport const startChatting = (dialog) => ({type: START_CHATTING, dialog});\r\n\r\nexport const setDialogs = (dialogs) => ({type: SET_DIALOGS, dialogs});\r\n\r\nexport const getDialogMessages = (messages) => ({type: GET_DIALOGS_MESSAGES, messages})\r\n\r\nexport const sendNewMessage = (userId, body) => async (dispatch) => {\r\n    const response = await dialogsAPI.sendMessage(userId,body)\r\n    dispatch(sendMessageAC(response))\r\n}\r\n\r\nexport const startDialog = (userId) => async (dispatch)=>{\r\n    const response = await dialogsAPI.startChatting(userId)\r\ndebugger\r\n    if (response.resultCode === 0) {\r\n        dispatch(startChatting(response.data))\r\n    }\r\n}\r\n\r\nexport const getDialogs = () => async (dispatch)=> {\r\n    const response = await dialogsAPI.getDialogs()\r\n    dispatch(setDialogs(response.data))\r\n}\r\n\r\nexport const getMessages = (userId) => async (dispatch)=>{\r\n\r\n    const response = await dialogsAPI.getMassagesList(userId)\r\n    debugger\r\n        dispatch(getDialogMessages(response.data))\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default dialogsReducer\r\n\r\n    // .map(d =>{\r\n    //     if (d.userId === action.userId){\r\n    //         return d.messages\r\n    //     }\r\n    //     return d\r\n    // })\r\n"]},"metadata":{},"sourceType":"module"}