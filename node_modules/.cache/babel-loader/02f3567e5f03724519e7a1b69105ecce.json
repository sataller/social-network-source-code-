{"ast":null,"code":"import { toDoListAPI } from \"../API/api\";\nimport { updateObjectInArray } from \"../utils/objectHelpers\";\nconst GET_LISTS = \"network/toDoLists/GET_LISTS\";\nconst ADD_NEW_LIST = \"network/toDoLists/ADD_NEW_LIST\";\nconst DELETE_LIST = \"network/toDoLists/DELETE_LIST\";\nconst UPDATE_LIST_TITLE = \"network/toDoLists/UPDATE_LIST_TITLE\";\nconst GET_TASKS = \"network/toDoLists/GET_TASKS\";\nconst CREATE_TASKS = \"network/toDoLists/CREATE_TASKS\";\nlet initialisation = {\n  toDoLists: [],\n  tasksLists: []\n};\n\nconst todoListReducer = (state = initialisation, action) => {\n  switch (action.type) {\n    case GET_LISTS:\n      {\n        return { ...state,\n          toDoLists: action.lists\n        };\n      }\n\n    case ADD_NEW_LIST:\n      {\n        return { ...state,\n          toDoLists: [...state.toDoLists, action.newList]\n        };\n      }\n\n    case DELETE_LIST:\n      {\n        return { ...state,\n          toDoLists: state.toDoLists.filter(l => l.id !== action.listId)\n        };\n      }\n\n    case UPDATE_LIST_TITLE:\n      {\n        return { ...state,\n          toDoLists: updateObjectInArray(state.toDoLists, \"id\", action.listId, {\n            title: action.title\n          })\n        };\n      }\n\n    case GET_TASKS:\n      {\n        return { ...state,\n          // toDoLists: updateObjectInArray(state.toDoLists, \"id\", action.listId, {tasks: action.tasksList})\n          tasksLists: [...state.tasksLists, {\n            listId: action.listId,\n            tasks: action.tasksList\n          }]\n        };\n      }\n\n    case CREATE_TASKS:\n      {\n        return { ...state,\n          tasksLists: state.tasksLists.map(u => {\n            if (u.id === action.listId) {\n              return { ...u,\n                ...newObjProps\n              };\n            }\n\n            return u;\n          })\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const getLists = lists => ({\n  type: GET_LISTS,\n  lists\n});\nexport const addNewList = newList => ({\n  type: ADD_NEW_LIST,\n  newList\n});\nexport const removeList = listId => ({\n  type: DELETE_LIST,\n  listId\n});\nexport const updateListTitle = (listId, title) => ({\n  type: UPDATE_LIST_TITLE,\n  listId,\n  title\n});\nexport const getTasks = (listId, tasksList) => ({\n  type: GET_TASKS,\n  listId,\n  tasksList\n});\nexport const createTask = (listId, newTask) => ({\n  type: CREATE_TASKS,\n  listId,\n  newTask\n});\nexport const getToDoLists = () => async dispatch => {\n  const response = await toDoListAPI.getAllLists();\n  dispatch(getLists(response.data));\n};\nexport const createNewList = title => async dispatch => {\n  const response = await toDoListAPI.createNewList(title);\n  dispatch(addNewList(response.data));\n};\nexport const deleteList = listId => async dispatch => {\n  const response = await toDoListAPI.deleteList(listId);\n\n  if (response.resultCode === 0) {\n    dispatch(removeList(listId));\n  }\n};\nexport const updateList = (listId, title) => async dispatch => {\n  const response = await toDoListAPI.updateList(listId, title);\n  dispatch(updateListTitle(listId, title));\n};\nexport const reorderLists = (listId, purAfterItemId) => async dispatch => {\n  const response = await toDoListAPI.reorderList(listId, purAfterItemId);\n\n  if (response.resultCode === 0) {// dispatch(stId,\n  }\n};\nexport const getTasksForList = (listId, count, page) => async dispatch => {\n  const response = await toDoListAPI.getPortionTasksForList(listId, count, page);\n  dispatch(getTasks(listId, response.data));\n};\nexport const createTasksForList = listId => async dispatch => {\n  const response = await toDoListAPI.createNewTaskForList(listId);\n  dispatch(createTask(listId, response.data));\n};\nexport default todoListReducer;","map":{"version":3,"sources":["D:/react/net/project1/src/Redux/todoListReducer.js"],"names":["toDoListAPI","updateObjectInArray","GET_LISTS","ADD_NEW_LIST","DELETE_LIST","UPDATE_LIST_TITLE","GET_TASKS","CREATE_TASKS","initialisation","toDoLists","tasksLists","todoListReducer","state","action","type","lists","newList","filter","l","id","listId","title","tasks","tasksList","map","u","newObjProps","getLists","addNewList","removeList","updateListTitle","getTasks","createTask","newTask","getToDoLists","dispatch","response","getAllLists","data","createNewList","deleteList","resultCode","updateList","reorderLists","purAfterItemId","reorderList","getTasksForList","count","page","getPortionTasksForList","createTasksForList","createNewTaskForList"],"mappings":"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","sourcesContent":["import {toDoListAPI} from \"../API/api\";\r\nimport {updateObjectInArray} from \"../utils/objectHelpers\";\r\n\r\nconst GET_LISTS = \"network/toDoLists/GET_LISTS\"\r\nconst ADD_NEW_LIST = \"network/toDoLists/ADD_NEW_LIST\"\r\nconst DELETE_LIST = \"network/toDoLists/DELETE_LIST\"\r\nconst UPDATE_LIST_TITLE = \"network/toDoLists/UPDATE_LIST_TITLE\"\r\nconst GET_TASKS = \"network/toDoLists/GET_TASKS\"\r\nconst CREATE_TASKS = \"network/toDoLists/CREATE_TASKS\"\r\n\r\nlet initialisation = {\r\n    toDoLists: [],\r\n    tasksLists:[],\r\n}\r\n\r\nconst todoListReducer = (state = initialisation, action) => {\r\n    switch (action.type) {\r\n        case GET_LISTS: {\r\n            return {\r\n                ...state,\r\n                toDoLists: action.lists,\r\n            }\r\n        }\r\n        case ADD_NEW_LIST: {\r\n            return {\r\n                ...state,\r\n                toDoLists: [...state.toDoLists, action.newList]\r\n            }\r\n        }\r\n        case DELETE_LIST: {\r\n            return {\r\n                ...state,\r\n                toDoLists: state.toDoLists.filter(l => l.id !== action.listId)\r\n            }\r\n        }\r\n        case UPDATE_LIST_TITLE: {\r\n            return {\r\n                ...state,\r\n                toDoLists: updateObjectInArray(state.toDoLists, \"id\", action.listId, {title: action.title})\r\n            }\r\n        }\r\n        case GET_TASKS: {\r\n            return {\r\n                ...state,\r\n                // toDoLists: updateObjectInArray(state.toDoLists, \"id\", action.listId, {tasks: action.tasksList})\r\n                tasksLists:[...state.tasksLists, {listId:action.listId, tasks:action.tasksList}],\r\n            }\r\n        }\r\n        case CREATE_TASKS:{\r\n            return{\r\n                ...state,\r\n                tasksLists: state.tasksLists.map(u => {\r\n                    if (u.id=== action.listId) {\r\n                        return {...u, ...newObjProps}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getLists = (lists) => ({type: GET_LISTS, lists})\r\n\r\nexport const addNewList = (newList) => ({type: ADD_NEW_LIST, newList})\r\n\r\nexport const removeList = (listId) => ({type: DELETE_LIST, listId})\r\n\r\nexport const updateListTitle = (listId, title) => ({type: UPDATE_LIST_TITLE, listId, title})\r\n\r\nexport const getTasks = (listId, tasksList) => ({type: GET_TASKS, listId, tasksList})\r\n\r\nexport const createTask = (listId, newTask) => ({type: CREATE_TASKS, listId, newTask})\r\n\r\nexport const getToDoLists = () => async (dispatch) => {\r\n    const response = await toDoListAPI.getAllLists();\r\n    dispatch(getLists(response.data))\r\n}\r\nexport const createNewList = (title) => async (dispatch) => {\r\n    const response = await toDoListAPI.createNewList(title);\r\n    dispatch(addNewList(response.data))\r\n}\r\nexport const deleteList = (listId) => async (dispatch) => {\r\n    const response = await toDoListAPI.deleteList(listId);\r\n    if (response.resultCode === 0) {\r\n        dispatch(removeList(listId))\r\n    }\r\n}\r\nexport const updateList = (listId, title) => async (dispatch) => {\r\n    const response = await toDoListAPI.updateList(listId, title);\r\n    dispatch(updateListTitle(listId, title))\r\n}\r\n\r\nexport const reorderLists = (listId, purAfterItemId) => async (dispatch) => {\r\n    const response = await toDoListAPI.reorderList(listId, purAfterItemId);\r\n    if (response.resultCode === 0) {\r\n        // dispatch(stId,\r\n    }\r\n}\r\n\r\nexport const getTasksForList = (listId, count, page) => async (dispatch) => {\r\n    const response = await toDoListAPI.getPortionTasksForList(listId, count, page);\r\n    dispatch(getTasks(listId, response.data))\r\n}\r\nexport const createTasksForList = (listId) => async (dispatch) => {\r\n    const response = await toDoListAPI.createNewTaskForList(listId);\r\n    dispatch(createTask(listId, response.data))\r\n}\r\n\r\n\r\nexport default todoListReducer\r\n"]},"metadata":{},"sourceType":"module"}