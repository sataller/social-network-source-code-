{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\net\\\\project1\\\\src\\\\components\\\\Dialogs\\\\Dialog\\\\Message\\\\Messages.jsx\";\nimport React, { useState } from \"react\";\nimport Message from \"./Message\";\nimport { reversedCopy } from \"../../../../utils/arrayHalper\";\n\nconst Messages = props => {\n  let reversMessageElement = null;\n\n  if (props.activeDialogId && props.dialogsPage.messagesItems) {\n    let messageElement = props.dialogsPage.messagesItems;\n    reversMessageElement = reversedCopy(messageElement).map(m => React.createElement(Message, {\n      id: m.id,\n      key: m.id,\n      messageText: m.body,\n      recipientId: m.recipientId,\n      senderId: m.senderId,\n      senderName: m.senderName,\n      translatedBody: m.translatedBody,\n      viewed: m.viewed,\n      totalCount: m.totalCount,\n      addedAt: m.addedAt,\n      authUserId: props.authUserId,\n      setMessageViewed: props.setMessageViewed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, reversMessageElement);\n};\n\nexport default Messages; // let [numberOfPage, setNumberOfPage] = useState(1)\n//\n// let loadNextMessagesPage = React.lazy(() => {\n//         let pageCount = Math.ceil(props.dialogsPage.messages.totalCount / props.pageSize)\n//         if (numberOfPage >= pageCount) {\n//             return <div> It's all </div>\n//         }\n//         props.getMessages(props.activeDialogId, props.messagePageSize, (numberOfPage + 1))\n//         let startItem = numberOfPage * props.pageSize;\n//         let endItem = startItem + props.pageSize;\n//         let element = props.dialogsPage.messagesItems.slice(startItem, endItem);\n//\n//         setNumberOfPage(numberOfPage + 1);\n//\n//         let reversElement = reversedCopy(element).map(m => <Message id={m.id} key={m.id} messageText={m.body}\n//                                                                     recipientId={m.recipientId}\n//                                                                     senderId={m.senderId}\n//                                                                     senderName={m.senderName}\n//                                                                     translatedBody={m.translatedBody}\n//                                                                     viewed={m.viewed}\n//                                                                     totalCount={m.totalCount}\n//                                                                     addedAt={m.addedAt}/>)\n//         return reversElement\n//         // const DialogsContainer = React.lazy(() => import(\"./components/Dialogs/DialogsContainer\"))\n//         //     <Route path=\"/dialogs\" render={() => withSuspense(DialogsContainer)}/>\n//\n//\n//     }\n// )","map":{"version":3,"sources":["D:/react/net/project1/src/components/Dialogs/Dialog/Message/Messages.jsx"],"names":["React","useState","Message","reversedCopy","Messages","props","reversMessageElement","activeDialogId","dialogsPage","messagesItems","messageElement","map","m","id","body","recipientId","senderId","senderName","translatedBody","viewed","totalCount","addedAt","authUserId","setMessageViewed"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,YAAR,QAA2B,+BAA3B;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAExB,MAAIC,oBAAoB,GAAG,IAA3B;;AAEA,MAAID,KAAK,CAACE,cAAN,IAAwBF,KAAK,CAACG,WAAN,CAAkBC,aAA9C,EAA6D;AACzD,QAAIC,cAAc,GAAGL,KAAK,CAACG,WAAN,CAAkBC,aAAvC;AACAH,IAAAA,oBAAoB,GAAGH,YAAY,CAACO,cAAD,CAAZ,CAA6BC,GAA7B,CAAiCC,CAAC,IAAI,oBAAC,OAAD;AAAS,MAAA,EAAE,EAAEA,CAAC,CAACC,EAAf;AAAmB,MAAA,GAAG,EAAED,CAAC,CAACC,EAA1B;AAA8B,MAAA,WAAW,EAAED,CAAC,CAACE,IAA7C;AACS,MAAA,WAAW,EAAEF,CAAC,CAACG,WADxB;AAES,MAAA,QAAQ,EAAEH,CAAC,CAACI,QAFrB;AAGS,MAAA,UAAU,EAAEJ,CAAC,CAACK,UAHvB;AAIS,MAAA,cAAc,EAAEL,CAAC,CAACM,cAJ3B;AAKS,MAAA,MAAM,EAAEN,CAAC,CAACO,MALnB;AAMS,MAAA,UAAU,EAAEP,CAAC,CAACQ,UANvB;AAOS,MAAA,OAAO,EAAER,CAAC,CAACS,OAPpB;AAQS,MAAA,UAAU,EAAEhB,KAAK,CAACiB,UAR3B;AASS,MAAA,gBAAgB,EAAEjB,KAAK,CAACkB,gBATjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAtC,CAAvB;AAUH;;AAED,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKjB,oBADL,CADJ;AAKH,CAvBD;;AAyBA,eAAeF,QAAf,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {useState} from \"react\"\r\nimport Message from \"./Message\";\r\nimport {reversedCopy} from \"../../../../utils/arrayHalper\";\r\n\r\nconst Messages = (props) => {\r\n\r\n    let reversMessageElement = null;\r\n\r\n    if (props.activeDialogId && props.dialogsPage.messagesItems) {\r\n        let messageElement = props.dialogsPage.messagesItems;\r\n        reversMessageElement = reversedCopy(messageElement).map(m => <Message id={m.id} key={m.id} messageText={m.body}\r\n                                                                              recipientId={m.recipientId}\r\n                                                                              senderId={m.senderId}\r\n                                                                              senderName={m.senderName}\r\n                                                                              translatedBody={m.translatedBody}\r\n                                                                              viewed={m.viewed}\r\n                                                                              totalCount={m.totalCount}\r\n                                                                              addedAt={m.addedAt}\r\n                                                                              authUserId={props.authUserId}\r\n                                                                              setMessageViewed={props.setMessageViewed}/>)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {reversMessageElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Messages\r\n\r\n\r\n// let [numberOfPage, setNumberOfPage] = useState(1)\r\n//\r\n// let loadNextMessagesPage = React.lazy(() => {\r\n//         let pageCount = Math.ceil(props.dialogsPage.messages.totalCount / props.pageSize)\r\n//         if (numberOfPage >= pageCount) {\r\n//             return <div> It's all </div>\r\n//         }\r\n//         props.getMessages(props.activeDialogId, props.messagePageSize, (numberOfPage + 1))\r\n//         let startItem = numberOfPage * props.pageSize;\r\n//         let endItem = startItem + props.pageSize;\r\n//         let element = props.dialogsPage.messagesItems.slice(startItem, endItem);\r\n//\r\n//         setNumberOfPage(numberOfPage + 1);\r\n//\r\n//         let reversElement = reversedCopy(element).map(m => <Message id={m.id} key={m.id} messageText={m.body}\r\n//                                                                     recipientId={m.recipientId}\r\n//                                                                     senderId={m.senderId}\r\n//                                                                     senderName={m.senderName}\r\n//                                                                     translatedBody={m.translatedBody}\r\n//                                                                     viewed={m.viewed}\r\n//                                                                     totalCount={m.totalCount}\r\n//                                                                     addedAt={m.addedAt}/>)\r\n//         return reversElement\r\n//         // const DialogsContainer = React.lazy(() => import(\"./components/Dialogs/DialogsContainer\"))\r\n//         //     <Route path=\"/dialogs\" render={() => withSuspense(DialogsContainer)}/>\r\n//\r\n//\r\n//     }\r\n// )\r\n"]},"metadata":{},"sourceType":"module"}