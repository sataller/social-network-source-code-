{"ast":null,"code":"import React from \"react\";\nimport { usersAPI } from \"../API/api\";\nimport { updateObjectInArray } from \"../utils/objectHelpers\";\nconst FOLLOW = \"network/users/FOLLOW\";\nconst UNFOLLOW = \"network/users/UNFOLLOW\";\nconst SET_USERS = \"network/users/SET_USERS\";\nconst SET_CURRENT_PAGE = \"network/users/SET_CURRENT_PAGE\";\nconst SET_TOTAL_USERS_COUNT = \"network/users/SET_TOTAL_USERS_COUNT\";\nconst TOGGLE_IS_FETCHING = \"network/users/TOGGLE_IS_FETCHING\";\nconst FOLLOWING_IN_PROGRESS = \"network/users/FOLLOWING_IN_PROGRESS\";\nlet initialization = {\n  users: [],\n  pageSize: 10,\n  totalCount: 0,\n  currentPage: 1,\n  isFetching: false,\n  followingInProgress: [],\n  paginationSize: 10\n};\n\nlet usersReducer = (state = initialization, action) => {\n  switch (action.type) {\n    case FOLLOW:\n      console.log(action.userId);\n      return { ...state,\n        users: updateObjectInArray(state.users, \"id\", action.userId, {\n          followed: true\n        })\n      };\n\n    case UNFOLLOW:\n      console.log(action.userId);\n      return { ...state,\n        users: updateObjectInArray(state.users, \"id\", action.userId, {\n          followed: true\n        })\n      };\n\n    case SET_USERS:\n      {\n        return { ...state,\n          users: [...action.users]\n        };\n      }\n\n    case SET_CURRENT_PAGE:\n      {\n        return { ...state,\n          currentPage: action.currentPage\n        };\n      }\n\n    case SET_TOTAL_USERS_COUNT:\n      {\n        return { ...state,\n          totalCount: action.totalCount\n        };\n      }\n\n    case TOGGLE_IS_FETCHING:\n      {\n        return { ...state,\n          isFetching: action.isFetching\n        };\n      }\n\n    case FOLLOWING_IN_PROGRESS:\n      {\n        return { ...state,\n          followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id != action.userId)\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport let toggleFollowingProgress = (isFetching, userId) => ({\n  type: FOLLOWING_IN_PROGRESS,\n  isFetching,\n  userId\n});\nexport let toggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport let setPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport let setTotalUsersCount = totalCount => ({\n  type: SET_TOTAL_USERS_COUNT,\n  totalCount\n});\nexport let followSuccess = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport let unfollowSuccess = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport let setUsers = users => ({\n  type: SET_USERS,\n  users\n});\nexport let requestUsers = (currentPage, pageSize) => {\n  return async dispatch => {\n    dispatch(setPage(currentPage));\n    dispatch(toggleIsFetching(true));\n    const data = await usersAPI.getUsers(currentPage, pageSize);\n    dispatch(toggleIsFetching(false));\n    dispatch(setUsers(data.items));\n    dispatch(setTotalUsersCount(data.totalCount));\n  };\n};\n\nlet followUnfolowMechanic = (userId, success, act) => {\n  return async dispatch => {\n    dispatch(toggleFollowingProgress(true, userId));\n    let data = await act(userId);\n\n    if (data.resultCode == 0) {\n      dispatch(success(userId));\n    }\n\n    dispatch(toggleFollowingProgress(false, userId));\n  };\n};\n\nexport let follow = userId => {\n  return followUnfolowMechanic(userId, followSuccess, usersAPI.followUser);\n};\nexport let unfollow = userId => {\n  return followUnfolowMechanic(userId, unfollowSuccess, usersAPI.unfollowUser);\n};\nexport default usersReducer;","map":{"version":3,"sources":["D:/react/net/project1/src/Redux/usersReducer.js"],"names":["React","usersAPI","updateObjectInArray","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","FOLLOWING_IN_PROGRESS","initialization","users","pageSize","totalCount","currentPage","isFetching","followingInProgress","paginationSize","usersReducer","state","action","type","console","log","userId","followed","filter","id","toggleFollowingProgress","toggleIsFetching","setPage","setTotalUsersCount","followSuccess","unfollowSuccess","setUsers","requestUsers","dispatch","data","getUsers","items","followUnfolowMechanic","success","act","resultCode","follow","followUser","unfollow","unfollowUser"],"mappings":"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","sourcesContent":["import React from \"react\"\r\nimport {usersAPI} from \"../API/api\";\r\nimport {updateObjectInArray} from \"../utils/objectHelpers\";\r\n\r\nconst FOLLOW = \"network/users/FOLLOW\";\r\nconst UNFOLLOW = \"network/users/UNFOLLOW\";\r\nconst SET_USERS = \"network/users/SET_USERS\";\r\nconst SET_CURRENT_PAGE = \"network/users/SET_CURRENT_PAGE\";\r\nconst SET_TOTAL_USERS_COUNT = \"network/users/SET_TOTAL_USERS_COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"network/users/TOGGLE_IS_FETCHING\";\r\nconst FOLLOWING_IN_PROGRESS = \"network/users/FOLLOWING_IN_PROGRESS\";\r\n\r\n\r\nlet initialization = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [],\r\n    paginationSize:10,\r\n}\r\nlet usersReducer = (state = initialization, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            console.log(action.userId)\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, \"id\", action.userId, {followed: true})\r\n            }\r\n\r\n        case UNFOLLOW:\r\n            console.log(action.userId)\r\n\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, \"id\", action.userId, {followed: true})\r\n            }\r\n        case SET_USERS: {\r\n            return {...state, users: [...action.users]}\r\n\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalCount: action.totalCount}\r\n        }\r\n\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n\r\n        case FOLLOWING_IN_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ?\r\n                    [...state.followingInProgress, action.userId] :\r\n                    state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport let toggleFollowingProgress = (isFetching, userId) => ({type: FOLLOWING_IN_PROGRESS, isFetching, userId})\r\nexport let toggleIsFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching})\r\nexport let setPage = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage})\r\nexport let setTotalUsersCount = (totalCount) => ({type: SET_TOTAL_USERS_COUNT, totalCount})\r\nexport let followSuccess = (userId) => ({type: FOLLOW, userId})\r\nexport let unfollowSuccess = (userId) => ({type: UNFOLLOW, userId})\r\nexport let setUsers = (users) => ({type: SET_USERS, users})\r\n\r\n\r\nexport let requestUsers = (currentPage, pageSize) => {\r\n    return (async (dispatch) => {\r\n        dispatch(setPage(currentPage))\r\n        dispatch(toggleIsFetching(true));\r\n        const data = await usersAPI.getUsers(currentPage, pageSize);\r\n        dispatch(toggleIsFetching(false))\r\n\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    })\r\n}\r\n\r\nlet followUnfolowMechanic = (userId, success, act) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        let data = await act(userId)\r\n        if (data.resultCode == 0) {\r\n            dispatch(success(userId))\r\n        }\r\n        dispatch(toggleFollowingProgress(false, userId))\r\n    }\r\n}\r\n\r\nexport let follow = (userId) => {\r\n    return followUnfolowMechanic(userId, followSuccess, usersAPI.followUser);\r\n}\r\n\r\nexport let unfollow = (userId) => {\r\n    return followUnfolowMechanic(userId, unfollowSuccess, usersAPI.unfollowUser);\r\n}\r\n\r\nexport default usersReducer\r\n"]},"metadata":{},"sourceType":"module"}