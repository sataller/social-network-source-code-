{"ast":null,"code":"import React from \"react\";\nimport { authAPI, usersAPI } from \"../API/api\";\nconst SET_USER_DATA = \"SET_USER_DATA\";\nlet initialization = {\n  userId: null,\n  email: null,\n  login: null,\n  isFetching: false,\n  isAuth: false\n};\n\nconst authReducer = (state = initialization, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload,\n        isAuth: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (id, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    id,\n    email,\n    login,\n    isAuth\n  }\n});\nexport let getAuthUserData = () => {\n  return dispatch => {\n    authAPI.me().then(response => {\n      console.log(response);\n\n      if (response.data.resultCode === 0) {\n        let {\n          id,\n          email,\n          login,\n          isAuth\n        } = response.data.data;\n        dispatch(setAuthUserData(id, email, login, true));\n      }\n    });\n  };\n};\nexport let LogIn = (email, password, rememberMe) => {\n  debugger;\n  return dispatch => {\n    authAPI.login(email, password, rememberMe).then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(getAuthUserData());\n      }\n    });\n  };\n};\nexport let Logout = () => {\n  return dispatch => {\n    authAPI.logout().then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(setAuthUserData(null, null, null, false));\n      }\n    });\n  };\n};\nexport default authReducer;","map":{"version":3,"sources":["D:/react/net/project1/src/Redux/authReducer.js"],"names":["React","authAPI","usersAPI","SET_USER_DATA","initialization","userId","email","login","isFetching","isAuth","authReducer","state","action","type","payload","setAuthUserData","id","getAuthUserData","dispatch","me","then","response","console","log","data","resultCode","LogIn","password","rememberMe","Logout","logout"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,EAAiBC,QAAjB,QAAgC,YAAhC;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAGA,IAAIC,cAAc,GAAG;AACjBC,EAAAA,MAAM,EAAE,IADS;AAEjBC,EAAAA,KAAK,EAAE,IAFU;AAGjBC,EAAAA,KAAK,EAAE,IAHU;AAIjBC,EAAAA,UAAU,EAAE,KAJK;AAKjBC,EAAAA,MAAM,EAAE;AALS,CAArB;;AAQA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGP,cAAT,EAAyBQ,MAAzB,KAAoC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,aAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEH,WAAGC,MAAM,CAACE,OAFP;AAGHL,QAAAA,MAAM,EAAE;AAHL,OAAP;;AAMJ;AACI,aAAOE,KAAP;AATR;AAWH,CAZD;;AAcA,OAAO,MAAMI,eAAe,GAAG,CAACC,EAAD,EAAKV,KAAL,EAAYC,KAAZ,EAAmBE,MAAnB,MAA+B;AAC1DI,EAAAA,IAAI,EAAEV,aADoD;AACrCW,EAAAA,OAAO,EAAE;AAC1BE,IAAAA,EAD0B;AACtBV,IAAAA,KADsB;AACfC,IAAAA,KADe;AACRE,IAAAA;AADQ;AAD4B,CAA/B,CAAxB;AAMP,OAAO,IAAIQ,eAAe,GAAG,MAAM;AAC/B,SAAQC,QAAD,IAAc;AACjBjB,IAAAA,OAAO,CAACkB,EAAR,GAAaC,IAAb,CAAkBC,QAAQ,IAAI;AAC1BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AACA,UAAIA,QAAQ,CAACG,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChC,YAAI;AAACT,UAAAA,EAAD;AAAKV,UAAAA,KAAL;AAAYC,UAAAA,KAAZ;AAAmBE,UAAAA;AAAnB,YAA6BY,QAAQ,CAACG,IAAT,CAAcA,IAA/C;AACAN,QAAAA,QAAQ,CAACH,eAAe,CAACC,EAAD,EAAKV,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACH;AACJ,KAND;AAOH,GARD;AASH,CAVM;AAYP,OAAO,IAAImB,KAAK,GAAG,CAACpB,KAAD,EAAQqB,QAAR,EAAkBC,UAAlB,KAAiC;AAChD;AACA,SAAQV,QAAD,IAAc;AACjBjB,IAAAA,OAAO,CAACM,KAAR,CAAcD,KAAd,EAAqBqB,QAArB,EAA+BC,UAA/B,EAA4CR,IAA5C,CAAiDC,QAAQ,IAAI;AACzD,UAAIA,QAAQ,CAACG,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCP,QAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACH;AACJ,KAJD;AAKH,GAND;AAOH,CATM;AAWP,OAAO,IAAIY,MAAM,GAAG,MAAM;AACtB,SAAQX,QAAD,IAAc;AACjBjB,IAAAA,OAAO,CAAC6B,MAAR,GAAiBV,IAAjB,CAAsBC,QAAQ,IAAI;AAC9B,UAAIA,QAAQ,CAACG,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCP,QAAAA,QAAQ,CAACH,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACH;AACJ,KAJD;AAKH,GAND;AAOH,CARM;AAUP,eAAeL,WAAf","sourcesContent":["import React from \"react\"\r\nimport {authAPI, usersAPI} from \"../API/api\";\r\n\r\nconst SET_USER_DATA = \"SET_USER_DATA\";\r\n\r\n\r\nlet initialization = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isFetching: false,\r\n    isAuth: false,\r\n}\r\n\r\nconst authReducer = (state = initialization, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                isAuth: true,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (id, email, login, isAuth) => ({\r\n    type: SET_USER_DATA, payload: {\r\n        id, email, login, isAuth\r\n    }\r\n})\r\n\r\nexport let getAuthUserData = () => {\r\n    return (dispatch) => {\r\n        authAPI.me().then(response => {\r\n            console.log(response)\r\n            if (response.data.resultCode === 0) {\r\n                let {id, email, login, isAuth} = response.data.data\r\n                dispatch(setAuthUserData(id, email, login, true))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport let LogIn = (email, password, rememberMe) => {\r\n    debugger\r\n    return (dispatch) => {\r\n        authAPI.login(email, password, rememberMe,).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(getAuthUserData())\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport let Logout = () => {\r\n    return (dispatch) => {\r\n        authAPI.logout().then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setAuthUserData(null, null, null, false))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}