{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\net\\\\project1\\\\src\\\\components\\\\common\\\\Pagination\\\\Pagenation.jsx\";\nimport React from \"react\";\nimport style from \"./Pagination.module.css\";\n\nconst Pagination = ({\n  totalCount,\n  pageSize,\n  currentPage,\n  paginationSize,\n  ...props\n}) => {\n  let pagesCount = Math.ceil(totalCount / pageSize);\n  let pages = [];\n\n  for (let i = 1; i <= pagesCount; i++) {\n    pages.push(i);\n  }\n\n  let leftBorder = leftValue => {\n    return leftValue = currentPage - Math.ceil((paginationSize - 1) / 2);\n  };\n\n  console.log(leftBorder);\n  let rightBorder = currentPage + Math.ceil((paginationSize - 1) / 2);\n  let pagination = pages.filter(p => {\n    if (leftBorder <= 1) {\n      p = currentPage && p <= paginationSize;\n    }\n  });\n  console.log(pagination);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: style.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \" \", \"<\", \" \"), pages.map(p => {\n    return React.createElement(\"span\", {\n      className: currentPage === p && style.selected,\n      onClick: e => {\n        props.onPageChanged(p);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, p, \" \");\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    className: style.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \">\"));\n};\n\nexport default Pagination;","map":{"version":3,"sources":["D:/react/net/project1/src/components/common/Pagination/Pagenation.jsx"],"names":["React","style","Pagination","totalCount","pageSize","currentPage","paginationSize","props","pagesCount","Math","ceil","pages","i","push","leftBorder","leftValue","console","log","rightBorder","pagination","filter","p","button","map","selected","e","onPageChanged"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA,UAAD;AAAaC,EAAAA,QAAb;AAAuBC,EAAAA,WAAvB;AAAoCC,EAAAA,cAApC;AAAoD,KAAGC;AAAvD,CAAD,KAAmE;AAClF,MAAIC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUP,UAAU,GAAGC,QAAvB,CAAjB;AACA,MAAIO,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,UAArB,EAAiCI,CAAC,EAAlC,EAAsC;AAClCD,IAAAA,KAAK,CAACE,IAAN,CAAWD,CAAX;AACH;;AAED,MAAIE,UAAU,GAAIC,SAAD,IAAe;AAC7B,WAAOA,SAAS,GAAGV,WAAW,GAAGI,IAAI,CAACC,IAAL,CAAU,CAACJ,cAAc,GAAG,CAAlB,IAAqB,CAA/B,CAAjC;AACF,GAFD;;AAGJU,EAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;AAEI,MAAII,WAAW,GAAGb,WAAW,GAAGI,IAAI,CAACC,IAAL,CAAU,CAACJ,cAAc,GAAG,CAAlB,IAAqB,CAA/B,CAAhC;AAEA,MAAIa,UAAU,GAAGR,KAAK,CAACS,MAAN,CAAcC,CAAC,IAAI;AAEhC,QAAIP,UAAU,IAAI,CAAlB,EAAoB;AAChBO,MAAAA,CAAC,GAAChB,WAAW,IAAIgB,CAAC,IAAEf,cAApB;AACH;AACJ,GALgB,CAAjB;AAOAU,EAAAA,OAAO,CAACC,GAAR,CAAaE,UAAb;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAQ,IAAA,IAAI,EAAE,QAAd;AAAwB,IAAA,SAAS,EAAElB,KAAK,CAACqB,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAmD,GAAnD,MADJ,EAEKX,KAAK,CAACY,GAAN,CAAUF,CAAC,IAAI;AACZ,WAAO;AAAM,MAAA,SAAS,EAAEhB,WAAW,KAAKgB,CAAhB,IAAqBpB,KAAK,CAACuB,QAA5C;AACM,MAAA,OAAO,EAAGC,CAAD,IAAO;AACZlB,QAAAA,KAAK,CAACmB,aAAN,CAAoBL,CAApB;AACH,OAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGUA,CAHV,MAAP;AAIH,GALA,CAFL,EAQI;AAAQ,IAAA,IAAI,EAAE,QAAd;AAAwB,IAAA,SAAS,EAAEpB,KAAK,CAACqB,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkD,GAAlD,CARJ,CADJ;AAYH,CAnCD;;AAqCA,eAAepB,UAAf","sourcesContent":["import React from \"react\";\r\nimport style from \"./Pagination.module.css\";\r\n\r\nconst Pagination = ({totalCount, pageSize, currentPage, paginationSize, ...props}) => {\r\n    let pagesCount = Math.ceil(totalCount / pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let leftBorder = (leftValue) => {\r\n       return leftValue = currentPage - Math.ceil((paginationSize - 1)/2)\r\n    } ;\r\nconsole.log(leftBorder)\r\n\r\n    let rightBorder = currentPage + Math.ceil((paginationSize - 1)/2);\r\n\r\n    let pagination = pages.filter( p => {\r\n\r\n        if (leftBorder <= 1){\r\n            p=currentPage && p<=paginationSize\r\n        }\r\n    })\r\n\r\n    console.log( pagination)\r\n\r\n    return (\r\n        <div>\r\n            <button type={\"button\"} className={style.button}> {\"<\"} </button>\r\n            {pages.map(p => {\r\n                return <span className={currentPage === p && style.selected}\r\n                             onClick={(e) => {\r\n                                 props.onPageChanged(p)\r\n                             }}>{p} </span>\r\n            })}\r\n            <button type={\"button\"} className={style.button}>{\">\"}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pagination"]},"metadata":{},"sourceType":"module"}