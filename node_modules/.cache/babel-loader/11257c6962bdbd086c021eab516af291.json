{"ast":null,"code":"import { dialogsAPI } from \"../API/api\";\nconst SEND_MESSAGE = \"network/dialogs/SEND_MESSAGE\";\nconst START_CHATTING = \"network/dialogs/START_CHATTING\";\nconst SET_DIALOGS = \"network/dialogs/SET_DIALOGS\";\nconst GET_DIALOGS_MESSAGES = \"network/dialogs/GET_DIALOGS_MESSAGES\";\nconst UPDATE_ACTIVE_DIALOG = \"network/dialogs/UPDATE_ACTIVE_DIALOG\";\nconst UPDATE_MESSAGE_VIEWED = \"network/dialogs/UPDATE_MESSAGE_VIEWED\";\nconst ADD_MESSAGE_IN_SPAM = \"network/dialogs/ADD_MESSAGE_IN_SPAM\";\nconst DELETE_MESSAGE = \"network/dialogs/DELETE_MESSAGE\";\nlet initialisation = {\n  dialogs: [],\n  activeDialogId: null,\n  messages: null,\n  messagesItems: null,\n  messagePageSize: 20,\n  numberOfPage: 1,\n  spam: null,\n  deleteMessages: null\n};\n\nlet dialogsReducer = (state = initialisation, action) => {\n  switch (action.type) {\n    case SEND_MESSAGE:\n      {\n        return { ...state,\n          // item: [...state.messages.items, action.newMessage.message],\n          messagesItems: [...state.messages.items, action.newMessage]\n        };\n      }\n\n    case START_CHATTING:\n      {\n        return { ...state,\n          dialogs: [...state.dialogs, action.dialog]\n        };\n      }\n\n    case SET_DIALOGS:\n      {\n        return { ...state,\n          dialogs: action.dialogs\n        };\n      }\n\n    case GET_DIALOGS_MESSAGES:\n      {\n        return { ...state,\n          messages: action.messages,\n          messagesItems: action.messages.items\n        };\n      }\n\n    case UPDATE_ACTIVE_DIALOG:\n      {\n        return { ...state,\n          activeDialogId: action.userId\n        };\n      }\n\n    case ADD_MESSAGE_IN_SPAM:\n      {\n        return { ...state,\n          spam: action.message.messages\n        };\n      }\n\n    case DELETE_MESSAGE:\n      {\n        return { ...state,\n          deleteMessages: [...state.deleteMessages, action.message]\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const sendMessageAC = newMessage => ({\n  type: SEND_MESSAGE,\n  newMessage\n});\nexport const startChatting = dialog => ({\n  type: START_CHATTING,\n  dialog\n});\nexport const setDialogs = dialogs => ({\n  type: SET_DIALOGS,\n  dialogs\n});\nexport const getDialogMessages = messages => ({\n  type: GET_DIALOGS_MESSAGES,\n  messages\n});\nexport const updateActiveDialog = userId => ({\n  type: UPDATE_ACTIVE_DIALOG,\n  userId\n});\nexport const addMessageInSpam = message => ({\n  type: ADD_MESSAGE_IN_SPAM,\n  message\n});\nexport const deletMessage = message => ({\n  type: DELETE_MESSAGE,\n  message\n});\nexport const sendNewMessage = (userId, body) => async dispatch => {\n  const response = await dialogsAPI.sendMessage(userId, body);\n\n  if (response.data.resultCode === 0) {\n    dispatch(sendMessageAC(response.data.data.message));\n  }\n};\nexport const startDialog = userId => async dispatch => {\n  const response = await dialogsAPI.startChatting(userId);\n\n  if (response.resultCode === 0) {\n    dispatch(startChatting(response.data));\n  }\n};\nexport const getDialogs = () => async dispatch => {\n  const response = await dialogsAPI.getDialogs();\n  dispatch(setDialogs(response.data));\n};\nexport const getMessages = (userId, count, pageNumber) => async dispatch => {\n  const response = await dialogsAPI.getMassagesList(userId, count, pageNumber);\n  dispatch(getDialogMessages(response.data));\n};\nexport const setActiveDialog = userId => dispatch => {\n  dispatch(updateActiveDialog(userId));\n};\nexport const setMessageViewed = messageId => async dispatch => {\n  await dialogsAPI.viewedMessage(messageId);\n};\nexport const sendMessageInSpam = messageId => async dispatch => {\n  debugger;\n  const response = await dialogsAPI.addMassageToSpam(messageId);\n\n  if (response.data.resultCode === 0) {\n    dispatch(addMessageInSpam(response.data));\n  }\n};\nexport const deleteMessageForMe = messageId => async dispatch => {\n  const response = await dialogsAPI.deleteMessageForMe(messageId);\n  debugger;\n  dispatch(deletMessage(response.data));\n};\nexport default dialogsReducer;","map":{"version":3,"sources":["D:/react/net/project1/src/Redux/dialogsReducer.js"],"names":["dialogsAPI","SEND_MESSAGE","START_CHATTING","SET_DIALOGS","GET_DIALOGS_MESSAGES","UPDATE_ACTIVE_DIALOG","UPDATE_MESSAGE_VIEWED","ADD_MESSAGE_IN_SPAM","DELETE_MESSAGE","initialisation","dialogs","activeDialogId","messages","messagesItems","messagePageSize","numberOfPage","spam","deleteMessages","dialogsReducer","state","action","type","items","newMessage","dialog","userId","message","sendMessageAC","startChatting","setDialogs","getDialogMessages","updateActiveDialog","addMessageInSpam","deletMessage","sendNewMessage","body","dispatch","response","sendMessage","data","resultCode","startDialog","getDialogs","getMessages","count","pageNumber","getMassagesList","setActiveDialog","setMessageViewed","messageId","viewedMessage","sendMessageInSpam","addMassageToSpam","deleteMessageForMe"],"mappings":"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","sourcesContent":["import {dialogsAPI} from \"../API/api\";\r\n\r\nconst SEND_MESSAGE = \"network/dialogs/SEND_MESSAGE\";\r\nconst START_CHATTING = \"network/dialogs/START_CHATTING\";\r\nconst SET_DIALOGS = \"network/dialogs/SET_DIALOGS\";\r\nconst GET_DIALOGS_MESSAGES = \"network/dialogs/GET_DIALOGS_MESSAGES\";\r\nconst UPDATE_ACTIVE_DIALOG = \"network/dialogs/UPDATE_ACTIVE_DIALOG\";\r\nconst UPDATE_MESSAGE_VIEWED = \"network/dialogs/UPDATE_MESSAGE_VIEWED\";\r\nconst ADD_MESSAGE_IN_SPAM = \"network/dialogs/ADD_MESSAGE_IN_SPAM\";\r\nconst DELETE_MESSAGE = \"network/dialogs/DELETE_MESSAGE\";\r\n\r\nlet initialisation = {\r\n    dialogs: [],\r\n    activeDialogId: null,\r\n    messages: null,\r\n    messagesItems: null,\r\n    messagePageSize: 20,\r\n    numberOfPage: 1,\r\n    spam:null,\r\n    deleteMessages:null,\r\n};\r\n\r\n\r\nlet dialogsReducer = (state = initialisation, action) => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE: {\r\n            return {\r\n                ...state,\r\n                // item: [...state.messages.items, action.newMessage.message],\r\n                messagesItems: [...state.messages.items, (action.newMessage)],\r\n            }\r\n        }\r\n        case START_CHATTING: {\r\n            return {\r\n                ...state,\r\n                dialogs: [...state.dialogs, action.dialog]\r\n            }\r\n        }\r\n        case SET_DIALOGS: {\r\n            return {\r\n                ...state,\r\n                dialogs: action.dialogs,\r\n            }\r\n        }\r\n        case GET_DIALOGS_MESSAGES: {\r\n            return {\r\n                ...state,\r\n                messages: action.messages,\r\n                messagesItems: action.messages.items,\r\n            }\r\n        }\r\n        case UPDATE_ACTIVE_DIALOG: {\r\n            return {\r\n                ...state,\r\n                activeDialogId: action.userId,\r\n            }\r\n        }\r\n        case ADD_MESSAGE_IN_SPAM:{\r\n            return{\r\n                ...state,\r\n                spam:action.message.messages,\r\n            }\r\n        }\r\n        case DELETE_MESSAGE:{\r\n            return {\r\n                ...state,\r\n                deleteMessages:[...state.deleteMessages, action.message]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const sendMessageAC = (newMessage) => ({type: SEND_MESSAGE, newMessage});\r\n\r\nexport const startChatting = (dialog) => ({type: START_CHATTING, dialog});\r\n\r\nexport const setDialogs = (dialogs) => ({type: SET_DIALOGS, dialogs});\r\n\r\nexport const getDialogMessages = (messages) => ({type: GET_DIALOGS_MESSAGES, messages})\r\n\r\nexport const updateActiveDialog = (userId) => ({type: UPDATE_ACTIVE_DIALOG, userId})\r\n\r\nexport const addMessageInSpam = (message) => ({type:ADD_MESSAGE_IN_SPAM, message})\r\n\r\nexport const deletMessage = (message) => ({type:DELETE_MESSAGE, message})\r\n\r\nexport const sendNewMessage = (userId, body) => async (dispatch) => {\r\n    const response = await dialogsAPI.sendMessage(userId, body)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(sendMessageAC(response.data.data.message))\r\n\r\n    }\r\n}\r\n\r\nexport const startDialog = (userId) => async (dispatch) => {\r\n    const response = await dialogsAPI.startChatting(userId)\r\n    if (response.resultCode === 0) {\r\n        dispatch(startChatting(response.data))\r\n    }\r\n}\r\n\r\nexport const getDialogs = () => async (dispatch) => {\r\n    const response = await dialogsAPI.getDialogs()\r\n    dispatch(setDialogs(response.data))\r\n}\r\n\r\nexport const getMessages = (userId, count, pageNumber) => async (dispatch) => {\r\n\r\n    const response = await dialogsAPI.getMassagesList(userId, count, pageNumber)\r\n    dispatch(getDialogMessages(response.data))\r\n}\r\n\r\nexport const setActiveDialog = (userId) => (dispatch) => {\r\n    dispatch(updateActiveDialog(userId))\r\n}\r\n\r\nexport const setMessageViewed = (messageId) => async (dispatch) => {\r\n    await dialogsAPI.viewedMessage(messageId)\r\n}\r\n\r\nexport const sendMessageInSpam = (messageId) => async (dispatch) =>{\r\n    debugger\r\n    const response = await dialogsAPI.addMassageToSpam(messageId);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(addMessageInSpam(response.data))\r\n    }\r\n}\r\n\r\nexport const deleteMessageForMe = (messageId) => async(dispatch) => {\r\n    const response = await dialogsAPI.deleteMessageForMe(messageId)\r\n    debugger\r\n    dispatch(deletMessage(response.data))\r\n}\r\n\r\n\r\nexport default dialogsReducer\r\n"]},"metadata":{},"sourceType":"module"}