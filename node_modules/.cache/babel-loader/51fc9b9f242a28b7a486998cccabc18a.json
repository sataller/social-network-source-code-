{"ast":null,"code":"import { toDoListAPI } from \"../API/api\";\nimport { updateObjectInArray } from \"../utils/objectHelpers\";\nconst GET_LISTS = \"network/toDoLists/GET_LISTS\";\nconst ADD_NEW_LIST = \"network/toDoLists/ADD_NEW_LIST\";\nconst DELETE_LIST = \"network/toDoLists/DELETE_LIST\";\nconst UPDATE_LIST_TITLE = \"network/toDoLists/UPDATE_LIST_TITLE\";\nconst GET_TASKS = \"network/toDoLists/GET_TASKS\";\nconst CREATE_TASK = \"network/toDoLists/CREATE_TASKS\";\nconst UPDATE_TASK = \"network/toDoLists/UPDATE_TASKS\";\nconst DELETE_TASK = \"network/toDoLists/DELETE_TASK\";\nlet initialisation = {\n  toDoLists: [],\n  tasksLists: []\n};\n\nconst todoListReducer = (state = initialisation, action) => {\n  switch (action.type) {\n    case GET_LISTS:\n      {\n        return { ...state,\n          toDoLists: action.lists\n        };\n      }\n\n    case ADD_NEW_LIST:\n      {\n        return { ...state,\n          toDoLists: [...state.toDoLists, action.newList]\n        };\n      }\n\n    case DELETE_LIST:\n      {\n        return { ...state,\n          toDoLists: state.toDoLists.filter(l => l.id !== action.listId)\n        };\n      }\n\n    case UPDATE_LIST_TITLE:\n      {\n        return { ...state,\n          toDoLists: updateObjectInArray(state.toDoLists, \"id\", action.listId, {\n            title: action.title\n          })\n        };\n      }\n\n    case GET_TASKS:\n      {\n        return { ...state,\n          // toDoLists: updateObjectInArray(state.toDoLists, \"id\", action.listId, {tasks: action.tasksList})\n          tasksLists: [...state.tasksLists, {\n            listId: action.listId,\n            tasks: action.tasksList\n          }]\n        };\n      }\n\n    case CREATE_TASK:\n      {\n        return { ...state,\n          tasksLists: state.tasksLists.map(u => {\n            if (u.id === action.listId) {\n              return { ...u,\n                tasks: [...u.tasks, action.newTask]\n              };\n            }\n\n            return u;\n          })\n        };\n      }\n\n    case UPDATE_TASK:\n      {\n        return { ...state,\n          tasksLists: state.tasksLists.map(u => {\n            if (u.id === action.listId) {\n              return { ...u,\n                tasks: u.tasks.map(t => {\n                  if (t.id === action.taskId) {\n                    return { ...t,\n                      item: [action.newProperty]\n                    };\n                  }\n                })\n              };\n            }\n\n            return u;\n          })\n        };\n      }\n\n    case DELETE_TASK:\n      {\n        return { ...state,\n          tasksLists: state.tasksLists.map(u => {\n            if (u.id === action.listId) {\n              return { ...u,\n                tasks: u.tasks.filter(t => t.id !== action.taskId)\n              };\n            }\n\n            return u;\n          })\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const getLists = lists => ({\n  type: GET_LISTS,\n  lists\n});\nexport const addNewList = newList => ({\n  type: ADD_NEW_LIST,\n  newList\n});\nexport const removeList = listId => ({\n  type: DELETE_LIST,\n  listId\n});\nexport const updateListTitle = (listId, title) => ({\n  type: UPDATE_LIST_TITLE,\n  listId,\n  title\n});\nexport const getTasks = (listId, tasksList) => ({\n  type: GET_TASKS,\n  listId,\n  tasksList\n});\nexport const createTask = (listId, newTask) => ({\n  type: CREATE_TASK,\n  listId,\n  newTask\n});\nexport const updateTask = (listId, taskId, newProperty) => ({\n  type: UPDATE_TASK,\n  listId,\n  taskId,\n  newProperty\n});\nexport const deleteTask = (listId, taskId) => ({\n  type: DELETE_TASK,\n  listId,\n  taskId\n});\nexport const getToDoLists = () => async dispatch => {\n  const response = await toDoListAPI.getAllLists();\n  dispatch(getLists(response.data));\n};\nexport const createNewList = title => async dispatch => {\n  const response = await toDoListAPI.createNewList(title);\n  dispatch(addNewList(response.data));\n};\nexport const deleteList = listId => async dispatch => {\n  const response = await toDoListAPI.deleteList(listId);\n\n  if (response.resultCode === 0) {\n    dispatch(removeList(listId));\n  }\n};\nexport const updateList = (listId, title) => async dispatch => {\n  const response = await toDoListAPI.updateList(listId, title);\n  dispatch(updateListTitle(listId, title));\n};\nexport const reorderLists = (listId, purAfterItemId) => async dispatch => {\n  const response = await toDoListAPI.reorderList(listId, purAfterItemId);\n\n  if (response.resultCode === 0) {// dispatch(stId,\n  }\n};\nexport const getTasksForList = (listId, count, page) => async dispatch => {\n  const response = await toDoListAPI.getPortionTasksForList(listId, count, page);\n  dispatch(getTasks(listId, response.data));\n};\nexport const createTasksForList = listId => async dispatch => {\n  const response = await toDoListAPI.createNewTaskForList(listId);\n  dispatch(createTask(listId, response.data));\n};\nexport const updateTasksForList = (listId, taskId, title, description, completed, status, priority, startDate, deadline) => async dispatch => {\n  const response = await toDoListAPI.updateTasksForList(listId, taskId, title, description, completed, status, priority, startDate, deadline);\n\n  if (response.resultCode === 0) {\n    dispatch(updateTask(listId, taskId, response.data));\n  }\n};\nexport const deleteTasksForList = (listId, taskId) => async dispatch => {\n  const response = await toDoListAPI.deleteTaskForList(listId, taskId);\n\n  if (response.resultCode === 0) {\n    dispatch(deleteTask(listId, taskId));\n  }\n};\nexport default todoListReducer;","map":{"version":3,"sources":["D:/react/net/project1/src/Redux/todoListReducer.js"],"names":["toDoListAPI","updateObjectInArray","GET_LISTS","ADD_NEW_LIST","DELETE_LIST","UPDATE_LIST_TITLE","GET_TASKS","CREATE_TASK","UPDATE_TASK","DELETE_TASK","initialisation","toDoLists","tasksLists","todoListReducer","state","action","type","lists","newList","filter","l","id","listId","title","tasks","tasksList","map","u","newTask","t","taskId","item","newProperty","getLists","addNewList","removeList","updateListTitle","getTasks","createTask","updateTask","deleteTask","getToDoLists","dispatch","response","getAllLists","data","createNewList","deleteList","resultCode","updateList","reorderLists","purAfterItemId","reorderList","getTasksForList","count","page","getPortionTasksForList","createTasksForList","createNewTaskForList","updateTasksForList","description","completed","status","priority","startDate","deadline","deleteTasksForList","deleteTaskForList"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,YAA1B;AACA,SAAQC,mBAAR,QAAkC,wBAAlC;AAEA,MAAMC,SAAS,GAAG,6BAAlB;AACA,MAAMC,YAAY,GAAG,gCAArB;AACA,MAAMC,WAAW,GAAG,+BAApB;AACA,MAAMC,iBAAiB,GAAG,qCAA1B;AACA,MAAMC,SAAS,GAAG,6BAAlB;AACA,MAAMC,WAAW,GAAG,gCAApB;AACA,MAAMC,WAAW,GAAG,gCAApB;AACA,MAAMC,WAAW,GAAG,+BAApB;AAEA,IAAIC,cAAc,GAAG;AACjBC,EAAAA,SAAS,EAAE,EADM;AAEjBC,EAAAA,UAAU,EAAE;AAFK,CAArB;;AAKA,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAGJ,cAAT,EAAyBK,MAAzB,KAAoC;AACxD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKd,SAAL;AAAgB;AACZ,eAAO,EACH,GAAGY,KADA;AAEHH,UAAAA,SAAS,EAAEI,MAAM,CAACE;AAFf,SAAP;AAIH;;AACD,SAAKd,YAAL;AAAmB;AACf,eAAO,EACH,GAAGW,KADA;AAEHH,UAAAA,SAAS,EAAE,CAAC,GAAGG,KAAK,CAACH,SAAV,EAAqBI,MAAM,CAACG,OAA5B;AAFR,SAAP;AAIH;;AACD,SAAKd,WAAL;AAAkB;AACd,eAAO,EACH,GAAGU,KADA;AAEHH,UAAAA,SAAS,EAAEG,KAAK,CAACH,SAAN,CAAgBQ,MAAhB,CAAuBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASN,MAAM,CAACO,MAA5C;AAFR,SAAP;AAIH;;AACD,SAAKjB,iBAAL;AAAwB;AACpB,eAAO,EACH,GAAGS,KADA;AAEHH,UAAAA,SAAS,EAAEV,mBAAmB,CAACa,KAAK,CAACH,SAAP,EAAkB,IAAlB,EAAwBI,MAAM,CAACO,MAA/B,EAAuC;AAACC,YAAAA,KAAK,EAAER,MAAM,CAACQ;AAAf,WAAvC;AAF3B,SAAP;AAIH;;AACD,SAAKjB,SAAL;AAAgB;AACZ,eAAO,EACH,GAAGQ,KADA;AAEH;AACAF,UAAAA,UAAU,EAAE,CAAC,GAAGE,KAAK,CAACF,UAAV,EAAsB;AAACU,YAAAA,MAAM,EAAEP,MAAM,CAACO,MAAhB;AAAwBE,YAAAA,KAAK,EAAET,MAAM,CAACU;AAAtC,WAAtB;AAHT,SAAP;AAKH;;AACD,SAAKlB,WAAL;AAAkB;AACd,eAAO,EACH,GAAGO,KADA;AAEHF,UAAAA,UAAU,EAAEE,KAAK,CAACF,UAAN,CAAiBc,GAAjB,CAAqBC,CAAC,IAAI;AAClC,gBAAIA,CAAC,CAACN,EAAF,KAASN,MAAM,CAACO,MAApB,EAA4B;AACxB,qBAAO,EAAC,GAAGK,CAAJ;AAAOH,gBAAAA,KAAK,EAAE,CAAC,GAAGG,CAAC,CAACH,KAAN,EAAaT,MAAM,CAACa,OAApB;AAAd,eAAP;AACH;;AACD,mBAAOD,CAAP;AACH,WALW;AAFT,SAAP;AASH;;AACD,SAAKnB,WAAL;AAAkB;AACd,eAAO,EACH,GAAGM,KADA;AAEHF,UAAAA,UAAU,EAAEE,KAAK,CAACF,UAAN,CAAiBc,GAAjB,CAAqBC,CAAC,IAAI;AAClC,gBAAIA,CAAC,CAACN,EAAF,KAASN,MAAM,CAACO,MAApB,EAA4B;AACxB,qBAAO,EACH,GAAGK,CADA;AACGH,gBAAAA,KAAK,EAAEG,CAAC,CAACH,KAAF,CAAQE,GAAR,CAAYG,CAAC,IAAI;AAC1B,sBAAIA,CAAC,CAACR,EAAF,KAASN,MAAM,CAACe,MAApB,EAA4B;AACxB,2BAAO,EAAC,GAAGD,CAAJ;AAAOE,sBAAAA,IAAI,EAAE,CAAChB,MAAM,CAACiB,WAAR;AAAb,qBAAP;AACH;AACJ,iBAJY;AADV,eAAP;AAOH;;AACD,mBAAOL,CAAP;AACH,WAXW;AAFT,SAAP;AAeH;;AACD,SAAKlB,WAAL;AAAkB;AACd,eAAO,EACH,GAAGK,KADA;AAEHF,UAAAA,UAAU,EAAEE,KAAK,CAACF,UAAN,CAAiBc,GAAjB,CAAqBC,CAAC,IAAI;AAClC,gBAAIA,CAAC,CAACN,EAAF,KAASN,MAAM,CAACO,MAApB,EAA4B;AACxB,qBAAO,EACH,GAAGK,CADA;AACGH,gBAAAA,KAAK,EAAEG,CAAC,CAACH,KAAF,CAAQL,MAAR,CAAeU,CAAC,IAAIA,CAAC,CAACR,EAAF,KAASN,MAAM,CAACe,MAApC;AADV,eAAP;AAGH;;AACD,mBAAOH,CAAP;AACH,WAPW;AAFT,SAAP;AAWH;;AAED;AACI,aAAOb,KAAP;AA3ER;AA6EH,CA9ED;;AAgFA,OAAO,MAAMmB,QAAQ,GAAIhB,KAAD,KAAY;AAACD,EAAAA,IAAI,EAAEd,SAAP;AAAkBe,EAAAA;AAAlB,CAAZ,CAAjB;AAEP,OAAO,MAAMiB,UAAU,GAAIhB,OAAD,KAAc;AAACF,EAAAA,IAAI,EAAEb,YAAP;AAAqBe,EAAAA;AAArB,CAAd,CAAnB;AAEP,OAAO,MAAMiB,UAAU,GAAIb,MAAD,KAAa;AAACN,EAAAA,IAAI,EAAEZ,WAAP;AAAoBkB,EAAAA;AAApB,CAAb,CAAnB;AAEP,OAAO,MAAMc,eAAe,GAAG,CAACd,MAAD,EAASC,KAAT,MAAoB;AAACP,EAAAA,IAAI,EAAEX,iBAAP;AAA0BiB,EAAAA,MAA1B;AAAkCC,EAAAA;AAAlC,CAApB,CAAxB;AAEP,OAAO,MAAMc,QAAQ,GAAG,CAACf,MAAD,EAASG,SAAT,MAAwB;AAACT,EAAAA,IAAI,EAAEV,SAAP;AAAkBgB,EAAAA,MAAlB;AAA0BG,EAAAA;AAA1B,CAAxB,CAAjB;AAEP,OAAO,MAAMa,UAAU,GAAG,CAAChB,MAAD,EAASM,OAAT,MAAsB;AAACZ,EAAAA,IAAI,EAAET,WAAP;AAAoBe,EAAAA,MAApB;AAA4BM,EAAAA;AAA5B,CAAtB,CAAnB;AAEP,OAAO,MAAMW,UAAU,GAAG,CAACjB,MAAD,EAASQ,MAAT,EAAiBE,WAAjB,MAAkC;AAAChB,EAAAA,IAAI,EAAER,WAAP;AAAoBc,EAAAA,MAApB;AAA4BQ,EAAAA,MAA5B;AAAoCE,EAAAA;AAApC,CAAlC,CAAnB;AAEP,OAAO,MAAMQ,UAAU,GAAG,CAAClB,MAAD,EAASQ,MAAT,MAAqB;AAACd,EAAAA,IAAI,EAAEP,WAAP;AAAoBa,EAAAA,MAApB;AAA4BQ,EAAAA;AAA5B,CAArB,CAAnB;AAEP,OAAO,MAAMW,YAAY,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAClD,QAAMC,QAAQ,GAAG,MAAM3C,WAAW,CAAC4C,WAAZ,EAAvB;AACAF,EAAAA,QAAQ,CAACT,QAAQ,CAACU,QAAQ,CAACE,IAAV,CAAT,CAAR;AACH,CAHM;AAIP,OAAO,MAAMC,aAAa,GAAIvB,KAAD,IAAW,MAAOmB,QAAP,IAAoB;AACxD,QAAMC,QAAQ,GAAG,MAAM3C,WAAW,CAAC8C,aAAZ,CAA0BvB,KAA1B,CAAvB;AACAmB,EAAAA,QAAQ,CAACR,UAAU,CAACS,QAAQ,CAACE,IAAV,CAAX,CAAR;AACH,CAHM;AAIP,OAAO,MAAME,UAAU,GAAIzB,MAAD,IAAY,MAAOoB,QAAP,IAAoB;AACtD,QAAMC,QAAQ,GAAG,MAAM3C,WAAW,CAAC+C,UAAZ,CAAuBzB,MAAvB,CAAvB;;AACA,MAAIqB,QAAQ,CAACK,UAAT,KAAwB,CAA5B,EAA+B;AAC3BN,IAAAA,QAAQ,CAACP,UAAU,CAACb,MAAD,CAAX,CAAR;AACH;AACJ,CALM;AAMP,OAAO,MAAM2B,UAAU,GAAG,CAAC3B,MAAD,EAASC,KAAT,KAAmB,MAAOmB,QAAP,IAAoB;AAC7D,QAAMC,QAAQ,GAAG,MAAM3C,WAAW,CAACiD,UAAZ,CAAuB3B,MAAvB,EAA+BC,KAA/B,CAAvB;AACAmB,EAAAA,QAAQ,CAACN,eAAe,CAACd,MAAD,EAASC,KAAT,CAAhB,CAAR;AACH,CAHM;AAKP,OAAO,MAAM2B,YAAY,GAAG,CAAC5B,MAAD,EAAS6B,cAAT,KAA4B,MAAOT,QAAP,IAAoB;AACxE,QAAMC,QAAQ,GAAG,MAAM3C,WAAW,CAACoD,WAAZ,CAAwB9B,MAAxB,EAAgC6B,cAAhC,CAAvB;;AACA,MAAIR,QAAQ,CAACK,UAAT,KAAwB,CAA5B,EAA+B,CAC3B;AACH;AACJ,CALM;AAOP,OAAO,MAAMK,eAAe,GAAG,CAAC/B,MAAD,EAASgC,KAAT,EAAgBC,IAAhB,KAAyB,MAAOb,QAAP,IAAoB;AACxE,QAAMC,QAAQ,GAAG,MAAM3C,WAAW,CAACwD,sBAAZ,CAAmClC,MAAnC,EAA2CgC,KAA3C,EAAkDC,IAAlD,CAAvB;AACAb,EAAAA,QAAQ,CAACL,QAAQ,CAACf,MAAD,EAASqB,QAAQ,CAACE,IAAlB,CAAT,CAAR;AACH,CAHM;AAIP,OAAO,MAAMY,kBAAkB,GAAInC,MAAD,IAAY,MAAOoB,QAAP,IAAoB;AAC9D,QAAMC,QAAQ,GAAG,MAAM3C,WAAW,CAAC0D,oBAAZ,CAAiCpC,MAAjC,CAAvB;AACAoB,EAAAA,QAAQ,CAACJ,UAAU,CAAChB,MAAD,EAASqB,QAAQ,CAACE,IAAlB,CAAX,CAAR;AACH,CAHM;AAIP,OAAO,MAAMc,kBAAkB,GAAG,CAACrC,MAAD,EAASQ,MAAT,EAAiBP,KAAjB,EAAwBqC,WAAxB,EAAqCC,SAArC,EAAgDC,MAAhD,EACCC,QADD,EACWC,SADX,EACsBC,QADtB,KACmC,MAAOvB,QAAP,IAAoB;AACrF,QAAMC,QAAQ,GAAG,MAAM3C,WAAW,CAAC2D,kBAAZ,CAA+BrC,MAA/B,EAAuCQ,MAAvC,EAA+CP,KAA/C,EAAsDqC,WAAtD,EAAmEC,SAAnE,EAA8EC,MAA9E,EACnBC,QADmB,EACTC,SADS,EACEC,QADF,CAAvB;;AAEA,MAAItB,QAAQ,CAACK,UAAT,KAAwB,CAA5B,EAA+B;AAC3BN,IAAAA,QAAQ,CAACH,UAAU,CAACjB,MAAD,EAASQ,MAAT,EAAiBa,QAAQ,CAACE,IAA1B,CAAX,CAAR;AACH;AACJ,CAPM;AAQP,OAAO,MAAMqB,kBAAkB,GAAG,CAAC5C,MAAD,EAASQ,MAAT,KAAoB,MAAOY,QAAP,IAAoB;AACtE,QAAMC,QAAQ,GAAG,MAAM3C,WAAW,CAACmE,iBAAZ,CAA8B7C,MAA9B,EAAsCQ,MAAtC,CAAvB;;AACA,MAAIa,QAAQ,CAACK,UAAT,KAAwB,CAA5B,EAA+B;AAC3BN,IAAAA,QAAQ,CAACF,UAAU,CAAClB,MAAD,EAASQ,MAAT,CAAX,CAAR;AACH;AACJ,CALM;AAQP,eAAejB,eAAf","sourcesContent":["import {toDoListAPI} from \"../API/api\";\r\nimport {updateObjectInArray} from \"../utils/objectHelpers\";\r\n\r\nconst GET_LISTS = \"network/toDoLists/GET_LISTS\"\r\nconst ADD_NEW_LIST = \"network/toDoLists/ADD_NEW_LIST\"\r\nconst DELETE_LIST = \"network/toDoLists/DELETE_LIST\"\r\nconst UPDATE_LIST_TITLE = \"network/toDoLists/UPDATE_LIST_TITLE\"\r\nconst GET_TASKS = \"network/toDoLists/GET_TASKS\"\r\nconst CREATE_TASK = \"network/toDoLists/CREATE_TASKS\"\r\nconst UPDATE_TASK = \"network/toDoLists/UPDATE_TASKS\"\r\nconst DELETE_TASK = \"network/toDoLists/DELETE_TASK\"\r\n\r\nlet initialisation = {\r\n    toDoLists: [],\r\n    tasksLists: [],\r\n}\r\n\r\nconst todoListReducer = (state = initialisation, action) => {\r\n    switch (action.type) {\r\n        case GET_LISTS: {\r\n            return {\r\n                ...state,\r\n                toDoLists: action.lists,\r\n            }\r\n        }\r\n        case ADD_NEW_LIST: {\r\n            return {\r\n                ...state,\r\n                toDoLists: [...state.toDoLists, action.newList]\r\n            }\r\n        }\r\n        case DELETE_LIST: {\r\n            return {\r\n                ...state,\r\n                toDoLists: state.toDoLists.filter(l => l.id !== action.listId)\r\n            }\r\n        }\r\n        case UPDATE_LIST_TITLE: {\r\n            return {\r\n                ...state,\r\n                toDoLists: updateObjectInArray(state.toDoLists, \"id\", action.listId, {title: action.title})\r\n            }\r\n        }\r\n        case GET_TASKS: {\r\n            return {\r\n                ...state,\r\n                // toDoLists: updateObjectInArray(state.toDoLists, \"id\", action.listId, {tasks: action.tasksList})\r\n                tasksLists: [...state.tasksLists, {listId: action.listId, tasks: action.tasksList}],\r\n            }\r\n        }\r\n        case CREATE_TASK: {\r\n            return {\r\n                ...state,\r\n                tasksLists: state.tasksLists.map(u => {\r\n                    if (u.id === action.listId) {\r\n                        return {...u, tasks: [...u.tasks, action.newTask]}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n        case UPDATE_TASK: {\r\n            return {\r\n                ...state,\r\n                tasksLists: state.tasksLists.map(u => {\r\n                    if (u.id === action.listId) {\r\n                        return {\r\n                            ...u, tasks: u.tasks.map(t => {\r\n                                if (t.id === action.taskId) {\r\n                                    return {...t, item: [action.newProperty]}\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n        case DELETE_TASK: {\r\n            return {\r\n                ...state,\r\n                tasksLists: state.tasksLists.map(u => {\r\n                    if (u.id === action.listId) {\r\n                        return {\r\n                            ...u, tasks: u.tasks.filter(t => t.id !== action.taskId)\r\n                        }\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        }\r\n        \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getLists = (lists) => ({type: GET_LISTS, lists})\r\n\r\nexport const addNewList = (newList) => ({type: ADD_NEW_LIST, newList})\r\n\r\nexport const removeList = (listId) => ({type: DELETE_LIST, listId})\r\n\r\nexport const updateListTitle = (listId, title) => ({type: UPDATE_LIST_TITLE, listId, title})\r\n\r\nexport const getTasks = (listId, tasksList) => ({type: GET_TASKS, listId, tasksList})\r\n\r\nexport const createTask = (listId, newTask) => ({type: CREATE_TASK, listId, newTask})\r\n\r\nexport const updateTask = (listId, taskId, newProperty) => ({type: UPDATE_TASK, listId, taskId, newProperty})\r\n\r\nexport const deleteTask = (listId, taskId) => ({type: DELETE_TASK, listId, taskId})\r\n\r\nexport const getToDoLists = () => async (dispatch) => {\r\n    const response = await toDoListAPI.getAllLists();\r\n    dispatch(getLists(response.data))\r\n}\r\nexport const createNewList = (title) => async (dispatch) => {\r\n    const response = await toDoListAPI.createNewList(title);\r\n    dispatch(addNewList(response.data))\r\n}\r\nexport const deleteList = (listId) => async (dispatch) => {\r\n    const response = await toDoListAPI.deleteList(listId);\r\n    if (response.resultCode === 0) {\r\n        dispatch(removeList(listId))\r\n    }\r\n}\r\nexport const updateList = (listId, title) => async (dispatch) => {\r\n    const response = await toDoListAPI.updateList(listId, title);\r\n    dispatch(updateListTitle(listId, title))\r\n}\r\n\r\nexport const reorderLists = (listId, purAfterItemId) => async (dispatch) => {\r\n    const response = await toDoListAPI.reorderList(listId, purAfterItemId);\r\n    if (response.resultCode === 0) {\r\n        // dispatch(stId,\r\n    }\r\n}\r\n\r\nexport const getTasksForList = (listId, count, page) => async (dispatch) => {\r\n    const response = await toDoListAPI.getPortionTasksForList(listId, count, page);\r\n    dispatch(getTasks(listId, response.data))\r\n}\r\nexport const createTasksForList = (listId) => async (dispatch) => {\r\n    const response = await toDoListAPI.createNewTaskForList(listId);\r\n    dispatch(createTask(listId, response.data))\r\n}\r\nexport const updateTasksForList = (listId, taskId, title, description, completed, status,\r\n                                   priority, startDate, deadline) => async (dispatch) => {\r\n    const response = await toDoListAPI.updateTasksForList(listId, taskId, title, description, completed, status,\r\n        priority, startDate, deadline);\r\n    if (response.resultCode === 0) {\r\n        dispatch(updateTask(listId, taskId, response.data))\r\n    }\r\n}\r\nexport const deleteTasksForList = (listId, taskId) => async (dispatch) => {\r\n    const response = await toDoListAPI.deleteTaskForList(listId, taskId);\r\n    if (response.resultCode === 0) {\r\n        dispatch(deleteTask(listId, taskId))\r\n    }\r\n}\r\n\r\n\r\nexport default todoListReducer\r\n"]},"metadata":{},"sourceType":"module"}