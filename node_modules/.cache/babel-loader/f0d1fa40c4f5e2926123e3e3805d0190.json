{"ast":null,"code":"import * as axios from \"axios\";\nconst instance = axios.create({\n  withCredentials: true,\n  baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\n  headers: {\n    \"API-KEY\": \"09237f73-efd4-4bff-b0ba-2a8987601863\"\n  }\n});\nexport const usersAPI = {\n  async getUsers(currentPage = 1, pageSize = 10) {\n    let response = await instance.get(`users?page=${currentPage}&count=${pageSize}`);\n    return response.data;\n  },\n\n  async unfollowUser(id) {\n    let response = await instance.delete(`follow/${id}`);\n    return response.data;\n  },\n\n  async followUser(id) {\n    let response = await instance.post(`follow/${id}`);\n    return response.data;\n  },\n\n  async getFollowingStatus(id) {\n    let response = await instance.get(`follow/${id}`);\n    return response;\n  },\n\n  setUsers: id => {\n    console.warn(\"Obsolete method. Pleas profileAPI object method\");\n    return profileAPI.setUsers(id);\n  }\n};\nexport const authAPI = {\n  async me() {\n    let response = await instance.get(`auth/me`);\n    return response.data;\n  },\n\n  async login(email, password, rememberMe = false, captcha = null) {\n    let response = await instance.post(`/auth/login`, {\n      email,\n      password,\n      rememberMe,\n      captcha\n    });\n    return response.data;\n  },\n\n  async logout() {\n    let response = await instance.delete(`/auth/login`);\n    return response.data;\n  }\n\n};\nexport const securityAPI = {\n  getCaptchaURL() {\n    return instance.get(`security/get-captcha-url`);\n  }\n\n};\nexport const profileAPI = {\n  setUsers: id => {\n    return instance.get(`profile/` + id);\n  },\n  getStatus: id => {\n    return instance.get(`profile/status/` + id);\n  },\n  updateStatus: status => {\n    return instance.put(`profile/status`, {\n      status: status\n    });\n  },\n  savePhoto: photoFile => {\n    const formData = new FormData();\n    formData.append(\"image\", photoFile);\n    return instance.put(`profile/photo`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n  }\n};\nexport const dialogsAPI = {\n  async startChatting(userId) {\n    const response = await instance.put(`dialogs/${userId}`);\n    return response;\n  },\n\n  async getDialogs() {\n    const response = await instance.get(`dialogs/`);\n    return response;\n  },\n\n  async getMassagesList(userId, count, pageNumber) {\n    const response = await instance.get(`dialogs/${userId}/messages?count=${count}&page=${pageNumber}`);\n    return response;\n  },\n\n  async sendMessage(userId, body) {\n    const response = await instance.post(`dialogs/${userId}/messages`, {\n      body: body\n    });\n    return response;\n  },\n\n  async viewedMessage(messageId) {\n    const response = await instance.get(`dialogs/messages/${messageId}/viewed`);\n    return response;\n  },\n\n  async addMassageToSpam(messageId) {\n    const response = await instance.post(`dialogs/messages/${messageId}/spam`);\n    return response;\n  },\n\n  async deleteMessageForMe(messageId) {\n    const response = await instance.delete(`dialogs/messages/${messageId}`);\n    return response;\n  },\n\n  async restoreMessage(messageId) {\n    const response = await instance.put(`dialogs/messages/${messageId}/restore`);\n    return response;\n  },\n\n  async returnMessage(userId, date) {\n    const response = await instance.get(`dialogs/${userId}/messages/new?newerThen=${date}`);\n    return response;\n  },\n\n  async getNewMessages() {\n    const response = await instance.get(`dialogs/messages/new/count`);\n    return response;\n  }\n\n};\nexport const toDoListAPI = {\n  async getAllLists() {\n    const response = await instance.get(`todo-lists`);\n    return response.items;\n  },\n\n  async createNewList(title) {\n    const response = await instance.post(`todo-lists`, title);\n    return response.data.item;\n  },\n\n  async deleteList(todolistId) {\n    const response = await instance.delete(`todo-lists/${todolistId}`);\n    return response;\n  },\n\n  async updateList(todolistId) {\n    const response = await instance.put(`todo-lists/${todolistId}`);\n    return response;\n  },\n\n  async reorderList(todolistId, putAfterItemId) {\n    const response = await instance.put(`todo-lists/${todolistId}/reorder`, putAfterItemId);\n    return response;\n  },\n\n  async getPortionTasksForList(todolistId, count, page) {\n    const response = await instance.get(`todo-lists/${todolistId}/tasks?count=${count}&page=${page}`);\n    return response;\n  },\n\n  async createNewTaskForList(todolistId) {\n    const response = await instance.post(`todo-lists/${todolistId}/tasks`);\n    return response;\n  },\n\n  async updateTasksForList(todolistId, taskId) {\n    const response = await instance.put(`todo-lists/${todolistId}/tasks/${taskId}`);\n    return response;\n  },\n\n  async deleteTaskForList(todolistId, taskId) {\n    const response = await instance.delete(`todo-lists/${todolistId}/tasks/${taskId}`);\n    return response;\n  },\n\n  async changeTaskOrder(todolistId, taskId) {\n    const response = await instance.put(`todo-lists/${todolistId}/tasks/${taskId}/reorder`);\n    return response;\n  }\n\n};","map":{"version":3,"sources":["D:/react/net/project1/src/API/api.js"],"names":["axios","instance","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","response","get","data","unfollowUser","id","delete","followUser","post","getFollowingStatus","setUsers","console","warn","profileAPI","authAPI","me","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptchaURL","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","dialogsAPI","startChatting","userId","getDialogs","getMassagesList","count","pageNumber","sendMessage","body","viewedMessage","messageId","addMassageToSpam","deleteMessageForMe","restoreMessage","returnMessage","date","getNewMessages","toDoListAPI","getAllLists","items","createNewList","title","item","deleteList","todolistId","updateList","reorderList","putAfterItemId","getPortionTasksForList","page","createNewTaskForList","updateTasksForList","taskId","deleteTaskForList","changeTaskOrder"],"mappings":"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","sourcesContent":["import * as axios from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\"API-KEY\": \"09237f73-efd4-4bff-b0ba-2a8987601863\"},\r\n});\r\n\r\nexport const usersAPI = {\r\n    async getUsers(currentPage = 1, pageSize = 10) {\r\n        let response = await instance.get(`users?page=${currentPage}&count=${pageSize}`,)\r\n        return response.data\r\n    },\r\n    async unfollowUser(id) {\r\n        let response = await instance.delete(`follow/${id}`)\r\n        return response.data\r\n    },\r\n    async followUser(id) {\r\n        let response = await instance.post(`follow/${id}`)\r\n        return response.data\r\n    },\r\n    async getFollowingStatus(id) {\r\n        let response = await instance.get(`follow/${id}`)\r\n        return response\r\n    },\r\n    setUsers: (id) => {\r\n        console.warn(\"Obsolete method. Pleas profileAPI object method\")\r\n        return profileAPI.setUsers(id)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    async me() {\r\n        let response = await instance.get(`auth/me`)\r\n        return response.data\r\n\r\n    },\r\n    async login(email, password, rememberMe = false, captcha = null) {\r\n        let response = await instance.post(`/auth/login`, {email, password, rememberMe, captcha})\r\n\r\n        return response.data\r\n\r\n    },\r\n    async logout() {\r\n        let response = await instance.delete(`/auth/login`)\r\n        return response.data\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaURL() {\r\n        return instance.get(`security/get-captcha-url`)\r\n\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    setUsers: (id) => {\r\n        return instance.get(`profile/` + id)\r\n    },\r\n    getStatus: (id) => {\r\n        return instance.get(`profile/status/` + id)\r\n    },\r\n\r\n    updateStatus: (status) => {\r\n        return instance.put(`profile/status`, {status: status})\r\n    },\r\n\r\n    savePhoto: (photoFile) => {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put(`profile/photo`, formData, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const dialogsAPI = {\r\n    async startChatting(userId) {\r\n        const response = await instance.put(`dialogs/${userId}`)\r\n        return response\r\n    },\r\n    async getDialogs() {\r\n        const response = await instance.get(`dialogs/`)\r\n        return response\r\n    },\r\n\r\n    async getMassagesList(userId, count, pageNumber) {\r\n        const response = await instance.get(`dialogs/${userId}/messages?count=${count}&page=${pageNumber}`)\r\n        return response\r\n    },\r\n\r\n    async sendMessage(userId, body) {\r\n        const response = await instance.post(`dialogs/${userId}/messages`, {body: body})\r\n        return response\r\n    },\r\n\r\n    async viewedMessage(messageId) {\r\n        const response = await instance.get(`dialogs/messages/${messageId}/viewed`)\r\n        return response\r\n    },\r\n\r\n    async addMassageToSpam(messageId) {\r\n        const response = await instance.post(`dialogs/messages/${messageId}/spam`)\r\n        return response\r\n    },\r\n\r\n    async deleteMessageForMe(messageId) {\r\n        const response = await instance.delete(`dialogs/messages/${messageId}`)\r\n        return response\r\n    },\r\n\r\n    async restoreMessage(messageId) {\r\n        const response = await instance.put(`dialogs/messages/${messageId}/restore`)\r\n        return response\r\n    },\r\n    async returnMessage(userId, date) {\r\n        const response = await instance.get(`dialogs/${userId}/messages/new?newerThen=${date}`)\r\n        return response\r\n    },\r\n\r\n    async getNewMessages() {\r\n        const response = await instance.get(`dialogs/messages/new/count`)\r\n        return response\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const toDoListAPI = {\r\n\r\n    async getAllLists() {\r\n        const response = await instance.get(`todo-lists`)\r\n        return response.items\r\n    },\r\n    async createNewList(title) {\r\n        const response = await instance.post(`todo-lists`, title)\r\n        return response.data.item\r\n    },\r\n    async deleteList(todolistId) {\r\n        const response = await instance.delete(`todo-lists/${todolistId}`)\r\n        return response\r\n    },\r\n    async updateList(todolistId) {\r\n        const response = await instance.put(`todo-lists/${todolistId}`)\r\n        return response\r\n    },\r\n    async reorderList(todolistId, putAfterItemId) {\r\n        const response = await instance.put(`todo-lists/${todolistId}/reorder`, putAfterItemId)\r\n        return response\r\n    },\r\n    async getPortionTasksForList(todolistId, count, page) {\r\n        const response = await instance.get(`todo-lists/${todolistId}/tasks?count=${count}&page=${page}`)\r\n        return response\r\n    },\r\n    async createNewTaskForList(todolistId) {\r\n        const response = await instance.post(`todo-lists/${todolistId}/tasks`)\r\n        return response\r\n    },\r\n    async updateTasksForList(todolistId, taskId) {\r\n        const response = await instance.put(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n        return response\r\n    },\r\n    async deleteTaskForList(todolistId, taskId) {\r\n        const response = await instance.delete(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n        return response\r\n    },\r\n    async changeTaskOrder(todolistId, taskId) {\r\n        const response = await instance.put(`todo-lists/${todolistId}/tasks/${taskId}/reorder`)\r\n        return response\r\n    },\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}