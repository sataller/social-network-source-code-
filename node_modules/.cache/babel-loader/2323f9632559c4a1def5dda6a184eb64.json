{"ast":null,"code":"import { dialogsAPI } from \"../API/api\";\nconst SEND_MESSAGE = \"network/dialogs/SEND_MESSAGE\";\nconst START_CHATTING = \"network/dialogs/START_CHATTING\";\nconst SET_DIALOGS = \"network/dialogs/SET_DIALOGS\";\nconst GET_DIALOGS_MESSAGES = \"network/dialogs/GET_DIALOGS_MESSAGES\";\nconst UPDATE_ACTIVE_DIALOG = \"network/dialogs/UPDATE_ACTIVE_DIALOG\";\nconst UPDATE_MESSAGE_VIEWED = \"network/dialogs/UPDATE_MESSAGE_VIEWED\";\nlet initialisation = {\n  dialogs: [],\n  activeDialogId: null,\n  messages: null,\n  messagesItems: null,\n  messagePageSize: 20,\n  numberOfPage: 1\n};\n\nlet dialogsReducer = (state = initialisation, action) => {\n  switch (action.type) {\n    case SEND_MESSAGE:\n      {\n        return { ...state,\n          // item: [...state.messages.items, action.newMessage.message],\n          messagesItems: [...state.messages.items, action.newMessage]\n        };\n      }\n\n    case START_CHATTING:\n      {\n        return { ...state,\n          dialogs: [...state.dialogs, action.dialog]\n        };\n      }\n\n    case SET_DIALOGS:\n      {\n        return { ...state,\n          dialogs: action.dialogs\n        };\n      }\n\n    case GET_DIALOGS_MESSAGES:\n      {\n        return { ...state,\n          messages: action.messages,\n          messagesItems: action.messages.items\n        };\n      }\n\n    case UPDATE_ACTIVE_DIALOG:\n      {\n        return { ...state,\n          activeDialogId: action.userId\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const sendMessageAC = newMessage => ({\n  type: SEND_MESSAGE,\n  newMessage\n});\nexport const startChatting = dialog => ({\n  type: START_CHATTING,\n  dialog\n});\nexport const setDialogs = dialogs => ({\n  type: SET_DIALOGS,\n  dialogs\n});\nexport const getDialogMessages = messages => ({\n  type: GET_DIALOGS_MESSAGES,\n  messages\n});\nexport const updateActiveDialog = userId => ({\n  type: UPDATE_ACTIVE_DIALOG,\n  userId\n});\nexport const sendNewMessage = (userId, body) => async dispatch => {\n  const response = await dialogsAPI.sendMessage(userId, body);\n\n  if (response.data.resultCode === 0) {\n    dispatch(sendMessageAC(response.data.data.message));\n  }\n};\nexport const startDialog = userId => async dispatch => {\n  const response = await dialogsAPI.startChatting(userId);\n\n  if (response.resultCode === 0) {\n    dispatch(startChatting(response.data));\n  }\n};\nexport const getDialogs = () => async dispatch => {\n  const response = await dialogsAPI.getDialogs();\n  dispatch(setDialogs(response.data));\n};\nexport const getMessages = (userId, count, pageNumber) => async dispatch => {\n  const response = await dialogsAPI.getMassagesList(userId, count, pageNumber);\n  dispatch(getDialogMessages(response.data));\n};\nexport const setActiveDialog = userId => dispatch => {\n  dispatch(updateActiveDialog(userId));\n};\nexport const setMessageViewed = messageId => async dispatch => {\n  await dialogsAPI.viewedMessage(messageId);\n};\nexport default dialogsReducer;","map":{"version":3,"sources":["D:/react/net/project1/src/Redux/dialogsReducer.js"],"names":["dialogsAPI","SEND_MESSAGE","START_CHATTING","SET_DIALOGS","GET_DIALOGS_MESSAGES","UPDATE_ACTIVE_DIALOG","UPDATE_MESSAGE_VIEWED","initialisation","dialogs","activeDialogId","messages","messagesItems","messagePageSize","numberOfPage","dialogsReducer","state","action","type","items","newMessage","dialog","userId","sendMessageAC","startChatting","setDialogs","getDialogMessages","updateActiveDialog","sendNewMessage","body","dispatch","response","sendMessage","data","resultCode","message","startDialog","getDialogs","getMessages","count","pageNumber","getMassagesList","setActiveDialog","setMessageViewed","messageId","viewedMessage"],"mappings":"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","sourcesContent":["import {dialogsAPI} from \"../API/api\";\r\n\r\nconst SEND_MESSAGE = \"network/dialogs/SEND_MESSAGE\";\r\nconst START_CHATTING = \"network/dialogs/START_CHATTING\";\r\nconst SET_DIALOGS = \"network/dialogs/SET_DIALOGS\";\r\nconst GET_DIALOGS_MESSAGES = \"network/dialogs/GET_DIALOGS_MESSAGES\";\r\nconst UPDATE_ACTIVE_DIALOG = \"network/dialogs/UPDATE_ACTIVE_DIALOG\";\r\nconst UPDATE_MESSAGE_VIEWED = \"network/dialogs/UPDATE_MESSAGE_VIEWED\";\r\n\r\n\r\nlet initialisation = {\r\n    dialogs: [],\r\n    activeDialogId: null,\r\n    messages: null,\r\n    messagesItems: null,\r\n    messagePageSize: 20,\r\n    numberOfPage: 1,\r\n};\r\n\r\n\r\nlet dialogsReducer = (state = initialisation, action) => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE: {\r\n            return {\r\n                ...state,\r\n                // item: [...state.messages.items, action.newMessage.message],\r\n                messagesItems: [...state.messages.items, (action.newMessage)],\r\n            }\r\n        }\r\n        case START_CHATTING: {\r\n            return {\r\n                ...state,\r\n                dialogs: [...state.dialogs, action.dialog]\r\n            }\r\n        }\r\n        case SET_DIALOGS: {\r\n            return {\r\n                ...state,\r\n                dialogs: action.dialogs,\r\n            }\r\n        }\r\n        case GET_DIALOGS_MESSAGES: {\r\n            return {\r\n                ...state,\r\n                messages: action.messages,\r\n                messagesItems: action.messages.items,\r\n            }\r\n        }\r\n        case UPDATE_ACTIVE_DIALOG: {\r\n            return {\r\n                ...state,\r\n                activeDialogId: action.userId,\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const sendMessageAC = (newMessage) => ({type: SEND_MESSAGE, newMessage});\r\n\r\nexport const startChatting = (dialog) => ({type: START_CHATTING, dialog});\r\n\r\nexport const setDialogs = (dialogs) => ({type: SET_DIALOGS, dialogs});\r\n\r\nexport const getDialogMessages = (messages) => ({type: GET_DIALOGS_MESSAGES, messages})\r\n\r\nexport const updateActiveDialog = (userId) => ({type: UPDATE_ACTIVE_DIALOG, userId})\r\n\r\nexport const sendNewMessage = (userId, body) => async (dispatch) => {\r\n    const response = await dialogsAPI.sendMessage(userId, body)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(sendMessageAC(response.data.data.message))\r\n\r\n    }\r\n}\r\n\r\nexport const startDialog = (userId) => async (dispatch) => {\r\n    const response = await dialogsAPI.startChatting(userId)\r\n    if (response.resultCode === 0) {\r\n        dispatch(startChatting(response.data))\r\n    }\r\n}\r\n\r\nexport const getDialogs = () => async (dispatch) => {\r\n    const response = await dialogsAPI.getDialogs()\r\n    dispatch(setDialogs(response.data))\r\n}\r\n\r\nexport const getMessages = (userId, count, pageNumber) => async (dispatch) => {\r\n\r\n    const response = await dialogsAPI.getMassagesList(userId, count, pageNumber)\r\n    dispatch(getDialogMessages(response.data))\r\n}\r\n\r\nexport const setActiveDialog = (userId) => (dispatch) => {\r\n    dispatch(updateActiveDialog(userId))\r\n}\r\n\r\nexport const setMessageViewed = (messageId) => async (dispatch) => {\r\n    await dialogsAPI.viewedMessage(messageId)\r\n}\r\n\r\n\r\nexport default dialogsReducer\r\n"]},"metadata":{},"sourceType":"module"}