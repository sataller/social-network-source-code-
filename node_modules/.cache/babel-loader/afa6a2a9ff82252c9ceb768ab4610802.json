{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\net\\\\project1\\\\src\\\\components\\\\Dialogs\\\\Dialog\\\\Message\\\\Messages.jsx\";\nimport React, { useState } from \"react\";\nimport Message from \"./Message\";\nimport { reversedCopy } from \"../../../../utils/arrayHalper\"; // recipientId={m.recipientId} senderId={m.senderId}\n// senderName={m.senderName}\n// translatedBody={m.translatedBody}\n//  totalCount={m.totalCount}\n\nconst Messages = props => {\n  let [numberOfPage, setNumberOfPage] = useState(1);\n  let reversMessageElement = null;\n\n  let loadNextMessagesPage = () => {\n    let pageCount = Math.ceil(props.dialogsPage.messages.totalCount / props.pageSize);\n\n    if (numberOfPage >= pageCount) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, \" It's all \");\n    }\n\n    props.getMessages(props.activeDialogId, props.messagePageSize, numberOfPage + 1);\n    let startItem = numberOfPage * props.pageSize;\n    let endItem = startItem + props.pageSize;\n    let element = props.dialogsPage.messagesItems.slice(startItem, endItem);\n    setNumberOfPage(numberOfPage + 1);\n    let reversElement = reversedCopy(element).map(m => React.createElement(Message, {\n      id: m.id,\n      key: m.id,\n      messageText: m.body,\n      recipientId: m.recipientId,\n      senderId: m.senderId,\n      senderName: m.senderName,\n      translatedBody: m.translatedBody,\n      viewed: m.viewed,\n      totalCount: m.totalCount,\n      addedAt: m.addedAt,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, reversElement);\n  };\n\n  if (props.activeDialogId) {\n    let messageElement = props.dialogsPage.messagesItems;\n    reversMessageElement = reversedCopy(messageElement).map(m => React.createElement(Message, {\n      id: m.id,\n      key: m.id,\n      messageText: m.body,\n      recipientId: m.recipientId,\n      senderId: m.senderId,\n      senderName: m.senderName,\n      translatedBody: m.translatedBody,\n      viewed: m.viewed,\n      totalCount: m.totalCount,\n      addedAt: m.addedAt,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, reversMessageElement, React.createElement(React.Suspense, {\n    fallback: React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Loading...\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }));\n};\n\nexport default Messages;","map":{"version":3,"sources":["D:/react/net/project1/src/components/Dialogs/Dialog/Message/Messages.jsx"],"names":["React","useState","Message","reversedCopy","Messages","props","numberOfPage","setNumberOfPage","reversMessageElement","loadNextMessagesPage","pageCount","Math","ceil","dialogsPage","messages","totalCount","pageSize","getMessages","activeDialogId","messagePageSize","startItem","endItem","element","messagesItems","slice","reversElement","map","m","id","body","recipientId","senderId","senderName","translatedBody","viewed","addedAt","messageElement"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\"\r\nimport Message from \"./Message\";\r\nimport {reversedCopy} from \"../../../../utils/arrayHalper\";\r\n\r\n// recipientId={m.recipientId} senderId={m.senderId}\r\n// senderName={m.senderName}\r\n// translatedBody={m.translatedBody}\r\n//  totalCount={m.totalCount}\r\n\r\nconst Messages = (props) => {\r\n\r\n    let [numberOfPage, setNumberOfPage] = useState(1)\r\n\r\n    let reversMessageElement = null;\r\n\r\n    let loadNextMessagesPage = () => {\r\n        let pageCount = Math.ceil(props.dialogsPage.messages.totalCount / props.pageSize)\r\n        if (numberOfPage >= pageCount) {\r\n            return <div> It's all </div>\r\n        }\r\n        props.getMessages(props.activeDialogId, props.messagePageSize, (numberOfPage+1))\r\n        let startItem = numberOfPage * props.pageSize;\r\n        let endItem = startItem + props.pageSize;\r\n        let element = props.dialogsPage.messagesItems.slice(startItem, endItem);\r\n\r\n        setNumberOfPage(numberOfPage + 1);\r\n\r\n        let reversElement = reversedCopy(element).map(m => <Message id={m.id} key={m.id} messageText={m.body}\r\n                                                                    recipientId={m.recipientId}\r\n                                                                    senderId={m.senderId}\r\n                                                                    senderName={m.senderName}\r\n                                                                    translatedBody={m.translatedBody}\r\n                                                                    viewed={m.viewed}\r\n                                                                    totalCount={m.totalCount}\r\n                                                                    addedAt={m.addedAt}/>)\r\n        return <div>{reversElement}</div>\r\n\r\n\r\n    }\r\n    if (props.activeDialogId) {\r\n        let messageElement = props.dialogsPage.messagesItems;\r\n        reversMessageElement = reversedCopy(messageElement).map(m => <Message id={m.id} key={m.id} messageText={m.body}\r\n                                                                              recipientId={m.recipientId}\r\n                                                                              senderId={m.senderId}\r\n                                                                              senderName={m.senderName}\r\n                                                                              translatedBody={m.translatedBody}\r\n                                                                              viewed={m.viewed}\r\n                                                                              totalCount={m.totalCount}\r\n                                                                              addedAt={m.addedAt}/>)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {reversMessageElement}\r\n            <React.Suspense fallback={<div>Loading...</div>}>\r\n                \r\n            </React.Suspense>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Messages"]},"metadata":{},"sourceType":"module"}