{"ast":null,"code":"import React from\"react\";import style from\"./Login.module.css\";import errorStyle from\"../common/FormsControl/FormControl.module.css\";import{Field,reduxForm}from\"redux-form\";import{createForm,Input}from\"../common/FormsControl/FormsControl\";import{maxLengthCreator,required}from\"../../utils/validators/validators\";import{connect}from\"react-redux\";import{LogIn}from\"../../Redux/authReducer\";import{Redirect}from\"react-router-dom\";var maxLength20=maxLengthCreator(20);var LoginForm=function LoginForm(props){return React.createElement(\"div\",null,React.createElement(\"form\",{onSubmit:props.handleSubmit},createForm(Input,[required,maxLength20],\"email\",\"email\",\"email\"),createForm(Input,[required,maxLength20],\"password\",\"password\",\"password\"),createForm(\"input\",null,\"rememberMe\",null,\"checkbox\",\"remember me\"),props.captchaURL?React.createElement(\"img\",{src:props.captchaURL}):null,props.captchaURL?createForm(Input,[required],\"captcha\",\"Symbols from image\",{}):null,props.error&&React.createElement(\"div\",{className:errorStyle.errorField},props.error),React.createElement(\"div\",null,React.createElement(\"button\",{className:style.sendButton},\"Submit\"))));};var LoginReduxForm=reduxForm({form:\"login\"})(LoginForm);var Login=function Login(props){var onSubmit=function onSubmit(formData){props.LogIn(formData.email,formData.password,formData.rememberMe,formData.captcha);console.log(formData);};if(props.isAuth){return React.createElement(Redirect,{to:\"/profile\"});}return React.createElement(\"div\",{className:style.login},React.createElement(\"h1\",null,\"Login \"),React.createElement(LoginReduxForm,{captchaURL:props.captchaURL,onSubmit:onSubmit}));};var mapStateToProps=function mapStateToProps(state){return{captchaURL:state.auth.captchaURL,isAuth:state.auth.isAuth};};export default connect(mapStateToProps,{LogIn:LogIn})(Login);","map":{"version":3,"sources":["D:/react/net/project1/src/components/Login/Login.jsx"],"names":["React","style","errorStyle","Field","reduxForm","createForm","Input","maxLengthCreator","required","connect","LogIn","Redirect","maxLength20","LoginForm","props","handleSubmit","captchaURL","error","errorField","sendButton","LoginReduxForm","form","Login","onSubmit","formData","email","password","rememberMe","captcha","console","log","isAuth","login","mapStateToProps","state","auth"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport style from \"./Login.module.css\"\r\nimport errorStyle from \"../common/FormsControl/FormControl.module.css\"\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {createForm, Input} from \"../common/FormsControl/FormsControl\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {LogIn} from \"../../Redux/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst maxLength20 = maxLengthCreator(20)\r\n\r\nconst LoginForm = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.handleSubmit}>\r\n\r\n                {createForm(Input, [required, maxLength20], \"email\", \"email\", \"email\") }\r\n                {createForm(Input, [required, maxLength20], \"password\", \"password\", \"password\") }\r\n                {createForm(\"input\", null, \"rememberMe\", null, \"checkbox\", \"remember me\") }\r\n\r\n                {props.captchaURL?<img src={props.captchaURL}/>: null}\r\n                {props.captchaURL? createForm(Input, [required], \"captcha\", \"Symbols from image\", {}):null}\r\n\r\n                {props.error && <div className={errorStyle.errorField}>\r\n                    {props.error}\r\n                </div>}\r\n                <div>\r\n                    <button className={style.sendButton}>\r\n                        Submit\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({\r\n    form: \"login\"\r\n})(LoginForm)\r\n\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.LogIn(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n        console.log(formData)\r\n    }\r\n\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to=\"/profile\"/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.login}>\r\n            <h1>Login </h1>\r\n            <LoginReduxForm captchaURL={props.captchaURL} onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        captchaURL: state.auth.captchaURL,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {LogIn})(Login)"]},"metadata":{},"sourceType":"module"}