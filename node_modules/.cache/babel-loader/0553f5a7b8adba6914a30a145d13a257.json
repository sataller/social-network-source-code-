{"ast":null,"code":"import { toDoListAPI } from \"../API/api\";\nimport { updateObjectInArray } from \"../utils/objectHelpers\";\nconst GET_LISTS = \"network/toDoLists/GET_LISTS\";\nconst ADD_NEW_LIST = \"network/toDoLists/ADD_NEW_LIST\";\nconst DELETE_LIST = \"network/toDoLists/DELETE_LIST\";\nconst UPDATE_LIST_TITLE = \"network/toDoLists/UPDATE_LIST_TITLE\";\nlet initialisation = {\n  toDoLists: []\n};\n\nconst todoListReducer = (state = initialisation, action) => {\n  switch (action.type) {\n    case GET_LISTS:\n      {\n        return { ...state,\n          toDoLists: action.lists\n        };\n      }\n\n    case ADD_NEW_LIST:\n      {\n        return { ...state,\n          toDoLists: [...state.toDoLists, action.newList]\n        };\n      }\n\n    case DELETE_LIST:\n      {\n        return { ...state,\n          toDoLists: state.toDoLists.filter(l => l.id !== action.listId)\n        };\n      }\n\n    case UPDATE_LIST_TITLE:\n      {\n        return { ...state,\n          toDoLists: updateObjectInArray(state.toDoLists, \"id\", action.listId, {\n            title: action.title\n          })\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const getLists = lists => ({\n  type: GET_LISTS,\n  lists\n});\nexport const addNewList = newList => ({\n  type: ADD_NEW_LIST,\n  newList\n});\nexport const removeList = listId => ({\n  type: DELETE_LIST,\n  listId\n});\nexport const updateListTitle = (listId, title) => ({\n  type: UPDATE_LIST_TITLE,\n  listId,\n  title\n});\nexport const getToDoLists = () => async dispatch => {\n  const response = await toDoListAPI.getAllLists();\n  dispatch(getLists(response.data));\n};\nexport const createNewList = title => async dispatch => {\n  const response = await toDoListAPI.createNewList(title);\n  dispatch(addNewList(response.data));\n};\nexport const deleteList = listId => async dispatch => {\n  const response = await toDoListAPI.deleteList(listId);\n\n  if (response.resultCode === 0) {\n    dispatch(removeList(listId));\n  }\n};\nexport const updateList = (listId, title) => async dispatch => {\n  const response = await toDoListAPI.updateList(listId, title);\n  dispatch(updateListTitle(listId, title));\n};\nexport const eList = (listId, title) => async dispatch => {\n  const response = await toDoListAPI.reorderList(listId, title);\n  dispatch(updateListTitle(listId, title));\n};\nexport default todoListReducer;","map":{"version":3,"sources":["D:/react/net/project1/src/Redux/todoListReducer.js"],"names":["toDoListAPI","updateObjectInArray","GET_LISTS","ADD_NEW_LIST","DELETE_LIST","UPDATE_LIST_TITLE","initialisation","toDoLists","todoListReducer","state","action","type","lists","newList","filter","l","id","listId","title","getLists","addNewList","removeList","updateListTitle","getToDoLists","dispatch","response","getAllLists","data","createNewList","deleteList","resultCode","updateList","eList","reorderList"],"mappings":"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","sourcesContent":["import {toDoListAPI} from \"../API/api\";\r\nimport {updateObjectInArray} from \"../utils/objectHelpers\";\r\n\r\nconst GET_LISTS = \"network/toDoLists/GET_LISTS\"\r\nconst ADD_NEW_LIST = \"network/toDoLists/ADD_NEW_LIST\"\r\nconst DELETE_LIST = \"network/toDoLists/DELETE_LIST\"\r\nconst UPDATE_LIST_TITLE = \"network/toDoLists/UPDATE_LIST_TITLE\"\r\n\r\nlet initialisation = {\r\n    toDoLists: [],\r\n}\r\n\r\nconst todoListReducer = (state = initialisation, action) => {\r\n    switch (action.type) {\r\n        case GET_LISTS: {\r\n            return {\r\n                ...state,\r\n                toDoLists: action.lists,\r\n            }\r\n        }\r\n        case ADD_NEW_LIST: {\r\n            return {\r\n                ...state,\r\n                toDoLists: [...state.toDoLists, action.newList]\r\n            }\r\n        }\r\n        case DELETE_LIST: {\r\n            return {\r\n                ...state,\r\n                toDoLists: state.toDoLists.filter(l => l.id !== action.listId)\r\n            }\r\n        }\r\n        case UPDATE_LIST_TITLE:{\r\n            return{\r\n                ...state,\r\n                toDoLists: updateObjectInArray(state.toDoLists, \"id\", action.listId, {title:action.title})\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getLists = (lists) => ({type: GET_LISTS, lists})\r\n\r\nexport const addNewList = (newList) => ({type: ADD_NEW_LIST, newList})\r\n\r\nexport const removeList = (listId) => ({type: DELETE_LIST, listId})\r\n\r\nexport const updateListTitle = (listId, title) => ({type: UPDATE_LIST_TITLE, listId, title})\r\n\r\nexport const getToDoLists = () => async (dispatch) => {\r\n    const response = await toDoListAPI.getAllLists();\r\n    dispatch(getLists(response.data))\r\n}\r\nexport const createNewList = (title) => async (dispatch) => {\r\n    const response = await toDoListAPI.createNewList(title);\r\n    dispatch(addNewList(response.data))\r\n}\r\nexport const deleteList = (listId) => async (dispatch) => {\r\n    const response = await toDoListAPI.deleteList(listId);\r\n    if (response.resultCode === 0) {\r\n        dispatch(removeList(listId))\r\n    }\r\n}\r\nexport const updateList = (listId, title) => async (dispatch) => {\r\n    const response = await toDoListAPI.updateList(listId, title);\r\n    dispatch(updateListTitle(listId, title))\r\n}\r\nexport const eList = (listId, title) => async (dispatch) => {\r\n    const response = await toDoListAPI.reorderList(listId, title);\r\n    dispatch(updateListTitle(listId, title))\r\n}\r\n\r\nexport default todoListReducer\r\n"]},"metadata":{},"sourceType":"module"}