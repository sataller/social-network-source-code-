{"ast":null,"code":"import { dialogsAPI } from \"../API/api\";\nconst SEND_MESSAGE = \"network/dialogs/SEND_MESSAGE\";\nconst START_CHATTING = \"network/dialogs/START_CHATTING\";\nconst SET_DIALOGS = \"network/dialogs/SET_DIALOGS\";\nconst GET_DIALOGS_MESSAGES = \"network/dialogs/GET_DIALOGS_MESSAGES\";\nlet initialisation = {\n  dialogs: [],\n  messages: null\n};\n\nlet dialogsReducer = (state = initialisation, action) => {\n  switch (action.type) {\n    case SEND_MESSAGE:\n      let newMessage = {\n        id: 4,\n        text: action.newText\n      };\n      let userId = action.userId;\n      return { ...state,\n        messages: [...state.messages, newMessage]\n      };\n\n    case START_CHATTING:\n      {\n        return { ...state,\n          dialogs: [...state.dialogs, action.dialogBody]\n        };\n      }\n\n    case SET_DIALOGS:\n      {\n        return { ...state,\n          dialogs: action.dialogs\n        };\n      }\n\n    case GET_DIALOGS_MESSAGES:\n      {\n        return { ...state,\n          messages: state.dialogs.map(d => {\n            if (d.id === action.id) {\n              return d.messages;\n            }\n\n            return d;\n          })\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const sendMessageAC = (newText, userId) => ({\n  type: SEND_MESSAGE,\n  newText,\n  userId: userId\n});\nexport const startChatting = dialogBody => ({\n  type: START_CHATTING,\n  dialogBody\n});\nexport const setDialogs = dialogs => ({\n  type: SET_DIALOGS,\n  dialogs\n});\nexport const getDialogMessages = messages => ({\n  type: GET_DIALOGS_MESSAGES,\n  messages\n});\nexport const startDialog = userId => async dispatch => {\n  const response = await dialogsAPI.startChatting(userId);\n\n  if (response.resultCode === 0) {\n    dispatch(startChatting(userId));\n  }\n};\nexport const getDialogs = () => async dispatch => {\n  const response = await dialogsAPI.getDialogs();\n  dispatch(setDialogs(response));\n};\nexport const getMessages = userId => async dispatch => {\n  const response = await dialogsAPI.getMassagesList(userId);\n  dispatch(getDialogMessages(response));\n};\nexport default dialogsReducer;","map":{"version":3,"sources":["D:/react/net/project1/src/Redux/dialogsReducer.js"],"names":["dialogsAPI","SEND_MESSAGE","START_CHATTING","SET_DIALOGS","GET_DIALOGS_MESSAGES","initialisation","dialogs","messages","dialogsReducer","state","action","type","newMessage","id","text","newText","userId","dialogBody","map","d","sendMessageAC","startChatting","setDialogs","getDialogMessages","startDialog","dispatch","response","resultCode","getDialogs","getMessages","getMassagesList"],"mappings":"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","sourcesContent":["import {dialogsAPI} from \"../API/api\";\r\n\r\nconst SEND_MESSAGE = \"network/dialogs/SEND_MESSAGE\";\r\nconst START_CHATTING = \"network/dialogs/START_CHATTING\";\r\nconst SET_DIALOGS = \"network/dialogs/SET_DIALOGS\";\r\nconst GET_DIALOGS_MESSAGES = \"network/dialogs/GET_DIALOGS_MESSAGES\";\r\n\r\n\r\n\r\nlet initialisation = {\r\n    dialogs: [],\r\n    messages: null,\r\n\r\n};\r\n\r\nlet dialogsReducer = (state = initialisation, action) => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let newMessage = {\r\n                id: 4,\r\n                text: action.newText,\r\n            }\r\n\r\n            let userId = action.userId\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage],\r\n            }\r\n        case START_CHATTING:{\r\n            return{...state,\r\n                dialogs: [...state.dialogs, action.dialogBody]}\r\n        }\r\n        case SET_DIALOGS:{\r\n            return{\r\n            ...state,\r\n                dialogs:action.dialogs,\r\n        }}\r\n        case GET_DIALOGS_MESSAGES:{\r\n            return{\r\n            ...state,\r\n            messages: state.dialogs.map(d =>{\r\n                if (d.id === action.id){\r\n                    return d.messages\r\n                }\r\n                return d\r\n        })\r\n        }}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const sendMessageAC = (newText, userId) => ({type: SEND_MESSAGE, newText, userId: userId});\r\n\r\nexport const startChatting = (dialogBody) => ({type: START_CHATTING, dialogBody});\r\n\r\nexport const setDialogs = (dialogs) => ({type: SET_DIALOGS, dialogs});\r\n\r\nexport const getDialogMessages = (messages) => ({type: GET_DIALOGS_MESSAGES, messages})\r\n\r\nexport const startDialog = (userId) => async (dispatch)=>{\r\n    const response = await dialogsAPI.startChatting(userId)\r\n    if (response.resultCode === 0) {\r\n        dispatch(startChatting(userId))\r\n    }\r\n}\r\n\r\nexport const getDialogs = () => async (dispatch)=> {\r\n    const response = await dialogsAPI.getDialogs()\r\n    dispatch(setDialogs(response))\r\n}\r\n\r\nexport const getMessages = (userId) => async (dispatch)=>{\r\n    const response = await dialogsAPI.getMassagesList(userId)\r\n        dispatch(getDialogMessages(response))\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default dialogsReducer"]},"metadata":{},"sourceType":"module"}