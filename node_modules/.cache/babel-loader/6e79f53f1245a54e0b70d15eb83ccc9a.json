{"ast":null,"code":"import React from \"react\";\nimport { authAPI, securityAPI } from \"../API/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = \"network/auth/SET_USER_DATA\";\nconst GET_CAPTCHA_URL_SUCCESS = \"network/auth/GET_CAPTCHA_URL_SUCCESS\";\nlet initialization = {\n  userId: null,\n  email: null,\n  login: null,\n  isFetching: false,\n  isAuth: false,\n  captchaURL: null\n};\n\nconst authReducer = (state = initialization, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n    case GET_CAPTCHA_URL_SUCCESS:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (id, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    id,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => {\n  return dispatch => {\n    return authAPI.me().then(response => {\n      console.log(response);\n\n      if (response.resultCode === 0) {\n        let {\n          id,\n          email,\n          login,\n          isAuth\n        } = response.data;\n        dispatch(setAuthUserData(id, email, login, true));\n      }\n    });\n  };\n};\nexport const getCaptchaURLSuccess = captchaURL => ({\n  type: GET_CAPTCHA_URL_SUCCESS,\n  payload: {\n    captchaURL\n  }\n});\nexport const LogIn = (email, password, rememberMe) => {\n  return dispatch => {\n    authAPI.login(email, password, rememberMe).then(response => {\n      if (response.resultCode === 0) {\n        dispatch(getAuthUserData());\n      } else {\n        if (response.resultCode === 10) {\n          debugger;\n          dispatch(getCaptchaURL());\n        }\n\n        let message = response.messages.length > 0 ? response.messages[0] : \"some error\";\n        dispatch(stopSubmit(\"login\", {\n          _error: message\n        }));\n      }\n    });\n  };\n};\nexport const getCaptchaURL = () => async dispatch => {\n  debugger;\n  const response = await securityAPI.getCaptchaURL();\n  const captchaURL = response.data.url;\n  dispatch(getCaptchaURLSuccess(captchaURL));\n};\nexport const Logout = () => {\n  return dispatch => {\n    authAPI.logout().then(response => {\n      if (response.resultCode === 0) {\n        dispatch(setAuthUserData(null, null, null, false));\n      }\n    });\n  };\n};\nexport default authReducer;","map":{"version":3,"sources":["D:/react/net/project1/src/Redux/authReducer.js"],"names":["React","authAPI","securityAPI","stopSubmit","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","initialization","userId","email","login","isFetching","isAuth","captchaURL","authReducer","state","action","type","payload","setAuthUserData","id","getAuthUserData","dispatch","me","then","response","console","log","resultCode","data","getCaptchaURLSuccess","LogIn","password","rememberMe","getCaptchaURL","message","messages","length","_error","url","Logout","logout"],"mappings":"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","sourcesContent":["import React from \"react\"\r\nimport {authAPI, securityAPI} from \"../API/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = \"network/auth/SET_USER_DATA\";\r\nconst GET_CAPTCHA_URL_SUCCESS = \"network/auth/GET_CAPTCHA_URL_SUCCESS\";\r\n\r\nlet initialization = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isFetching: false,\r\n    isAuth: false,\r\n    captchaURL: null,\r\n}\r\n\r\nconst authReducer = (state = initialization, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (id, email, login, isAuth) => ({\r\n    type: SET_USER_DATA, payload: {\r\n        id, email, login, isAuth\r\n    }\r\n})\r\n\r\nexport const getAuthUserData = () => {\r\n    return (dispatch) => {\r\n        return authAPI.me().then(response => {\r\n            console.log(response)\r\n            if (response.resultCode === 0) {\r\n                let {id, email, login, isAuth} = response.data\r\n                dispatch(setAuthUserData(id, email, login, true))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const getCaptchaURLSuccess = (captchaURL) => ({type: GET_CAPTCHA_URL_SUCCESS, payload:{captchaURL}})\r\n\r\n\r\nexport const LogIn = (email, password, rememberMe) => {\r\n    return (dispatch) => {\r\n        authAPI.login(email, password, rememberMe,).then(response => {\r\n            if (response.resultCode === 0) {\r\n                dispatch(getAuthUserData())\r\n            } else {\r\n                if (response.resultCode === 10) {\r\n                    debugger\r\n                    dispatch(getCaptchaURL())\r\n                }\r\n                let message = response.messages.length > 0 ? response.messages[0] : \"some error\";\r\n                dispatch(stopSubmit(\"login\", {_error: message}));\r\n            }\r\n        })\r\n    }\r\n}\r\nexport const getCaptchaURL = () => async (dispatch) => {\r\n    debugger\r\n    const response = await securityAPI.getCaptchaURL()\r\n    const captchaURL = response.data.url;\r\n    dispatch(getCaptchaURLSuccess(captchaURL));\r\n}\r\n\r\n\r\nexport const Logout = () => {\r\n    return (dispatch) => {\r\n        authAPI.logout().then(response => {\r\n            if (response.resultCode === 0) {\r\n                dispatch(setAuthUserData(null, null, null, false))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}