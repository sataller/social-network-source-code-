{"ast":null,"code":"import { dialogsAPI } from \"../API/api\";\nconst SEND_MESSAGE = \"network/dialogs/SEND_MESSAGE\";\nconst START_CHATTING = \"network/dialogs/START_CHATTING\";\nconst SET_DIALOGS = \"network/dialogs/SET_DIALOGS\";\nconst GET_DIALOGS_MESSAGES = \"network/dialogs/GET_DIALOGS_MESSAGES\";\nconst UPDATE_ACTIVE_DIALOG = \"network/dialogs/UPDATE_ACTIVE_DIALOG\";\nlet initialisation = {\n  dialogs: [],\n  activeDialogId: null,\n  messages: []\n};\n\nlet dialogsReducer = (state = initialisation, action) => {\n  switch (action.type) {\n    case SEND_MESSAGE:\n      {\n        return { ...state.messages,\n          items: [...state.messages.items, action.newMessage]\n        };\n      }\n\n    case START_CHATTING:\n      {\n        return { ...state,\n          dialogs: [...state.dialogs, action.dialog]\n        };\n      }\n\n    case SET_DIALOGS:\n      {\n        return { ...state,\n          dialogs: action.dialogs\n        };\n      }\n\n    case GET_DIALOGS_MESSAGES:\n      {\n        return { ...state,\n          messages: action.messages\n        };\n      }\n\n    case UPDATE_ACTIVE_DIALOG:\n      {\n        return { ...state,\n          activeDialogId: action.uaserId\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const sendMessageAC = (newMessage, userId, body) => ({\n  type: SEND_MESSAGE,\n  newMessage,\n  userId,\n  body\n});\nexport const startChatting = dialog => ({\n  type: START_CHATTING,\n  dialog\n});\nexport const setDialogs = dialogs => ({\n  type: SET_DIALOGS,\n  dialogs\n});\nexport const getDialogMessages = messages => ({\n  type: GET_DIALOGS_MESSAGES,\n  messages\n});\nexport const updateActiveDialog = userId => ({\n  type: UPDATE_ACTIVE_DIALOG,\n  userId\n});\nexport const sendNewMessage = (userId, body) => async dispatch => {\n  const response = await dialogsAPI.sendMessage(userId, body);\n\n  if (response.data.data.resultCode === 0) {\n    dispatch(sendMessageAC(response.data.data.message));\n  }\n};\nexport const startDialog = userId => async dispatch => {\n  const response = await dialogsAPI.startChatting(userId);\n\n  if (response.resultCode === 0) {\n    dispatch(startChatting(response.data));\n  }\n};\nexport const getDialogs = () => async dispatch => {\n  const response = await dialogsAPI.getDialogs();\n  dispatch(setDialogs(response.data));\n};\nexport const getMessages = userId => async dispatch => {\n  const response = await dialogsAPI.getMassagesList(userId);\n  debugger;\n  dispatch(getDialogMessages(response.data));\n  dispatch(updateActiveDialog(userId));\n};\nexport default dialogsReducer; // .map(d =>{\n//     if (d.userId === action.userId){\n//         return d.messages\n//     }\n//     return d\n// })\n// state.dialogs.map(d =>{\n//     if (d.userId === action.userId){\n//         return {...d, messages:[d.messages, action.body]}\n//     }\n//     return d\n// })","map":{"version":3,"sources":["D:/react/net/project1/src/Redux/dialogsReducer.js"],"names":["dialogsAPI","SEND_MESSAGE","START_CHATTING","SET_DIALOGS","GET_DIALOGS_MESSAGES","UPDATE_ACTIVE_DIALOG","initialisation","dialogs","activeDialogId","messages","dialogsReducer","state","action","type","items","newMessage","dialog","uaserId","sendMessageAC","userId","body","startChatting","setDialogs","getDialogMessages","updateActiveDialog","sendNewMessage","dispatch","response","sendMessage","data","resultCode","message","startDialog","getDialogs","getMessages","getMassagesList"],"mappings":"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","sourcesContent":["import {dialogsAPI} from \"../API/api\";\r\n\r\nconst SEND_MESSAGE = \"network/dialogs/SEND_MESSAGE\";\r\nconst START_CHATTING = \"network/dialogs/START_CHATTING\";\r\nconst SET_DIALOGS = \"network/dialogs/SET_DIALOGS\";\r\nconst GET_DIALOGS_MESSAGES = \"network/dialogs/GET_DIALOGS_MESSAGES\";\r\nconst UPDATE_ACTIVE_DIALOG = \"network/dialogs/UPDATE_ACTIVE_DIALOG\";\r\n\r\n\r\n\r\nlet initialisation = {\r\n    dialogs: [],\r\n    activeDialogId: null,\r\n    messages: [],\r\n\r\n};\r\n\r\nlet dialogsReducer = (state = initialisation, action) => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE: {\r\n            return {\r\n                ...state.messages,\r\n                items: [...state.messages.items, action.newMessage]\r\n            }\r\n        }\r\n        case START_CHATTING: {\r\n            return {\r\n                ...state,\r\n                dialogs: [...state.dialogs, action.dialog]\r\n            }\r\n        }\r\n        case SET_DIALOGS: {\r\n            return {\r\n                ...state,\r\n                dialogs: action.dialogs,\r\n            }\r\n        }\r\n        case GET_DIALOGS_MESSAGES: {\r\n            return {\r\n                ...state,\r\n                messages: action.messages,\r\n            }\r\n        }\r\n            case UPDATE_ACTIVE_DIALOG:{\r\n                return {\r\n                    ...state,\r\n                    activeDialogId: action.uaserId,\r\n                }\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const sendMessageAC = (newMessage, userId, body) => ({type: SEND_MESSAGE, newMessage, userId, body});\r\n\r\nexport const startChatting = (dialog) => ({type: START_CHATTING, dialog});\r\n\r\nexport const setDialogs = (dialogs) => ({type: SET_DIALOGS, dialogs});\r\n\r\nexport const getDialogMessages = (messages) => ({type: GET_DIALOGS_MESSAGES, messages})\r\n\r\nexport const updateActiveDialog = (userId) => ({type: UPDATE_ACTIVE_DIALOG, userId})\r\n\r\nexport const sendNewMessage = (userId, body) => async (dispatch) => {\r\n    const response = await dialogsAPI.sendMessage(userId, body)\r\n    if (response.data.data.resultCode === 0) {\r\n        dispatch(sendMessageAC(response.data.data.message))\r\n    }\r\n}\r\n\r\nexport const startDialog = (userId) => async (dispatch) => {\r\n    const response = await dialogsAPI.startChatting(userId)\r\n    if (response.resultCode === 0) {\r\n        dispatch(startChatting(response.data))\r\n    }\r\n}\r\n\r\nexport const getDialogs = () => async (dispatch) => {\r\n    const response = await dialogsAPI.getDialogs()\r\n    dispatch(setDialogs(response.data))\r\n}\r\n\r\nexport const getMessages = (userId) => async (dispatch) => {\r\n\r\n    const response = await dialogsAPI.getMassagesList(userId)\r\n    debugger\r\n    dispatch(getDialogMessages(response.data))\r\n    dispatch(updateActiveDialog(userId))\r\n\r\n}\r\n\r\nexport default dialogsReducer\r\n\r\n// .map(d =>{\r\n//     if (d.userId === action.userId){\r\n//         return d.messages\r\n//     }\r\n//     return d\r\n// })\r\n\r\n// state.dialogs.map(d =>{\r\n//     if (d.userId === action.userId){\r\n//         return {...d, messages:[d.messages, action.body]}\r\n//     }\r\n//     return d\r\n// })\r\n"]},"metadata":{},"sourceType":"module"}